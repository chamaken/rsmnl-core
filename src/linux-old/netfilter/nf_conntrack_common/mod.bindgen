/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub const IP_CT_ESTABLISHED_REPLY: ip_conntrack_info =
    ip_conntrack_info::IP_CT_IS_REPLY;
pub const IP_CT_NEW_REPLY: ip_conntrack_info =
    ip_conntrack_info::IP_CT_NUMBER;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ip_conntrack_info {
    IP_CT_ESTABLISHED = 0,
    IP_CT_RELATED = 1,
    IP_CT_NEW = 2,
    IP_CT_IS_REPLY = 3,
    IP_CT_RELATED_REPLY = 4,
    IP_CT_NUMBER = 5,
}
pub const IPS_SEEN_REPLY_BIT: ip_conntrack_status =
    ip_conntrack_status::IPS_EXPECTED;
pub const IPS_ASSURED_BIT: ip_conntrack_status =
    ip_conntrack_status::IPS_SEEN_REPLY;
pub const IPS_SRC_NAT_BIT: ip_conntrack_status =
    ip_conntrack_status::IPS_ASSURED;
pub const IPS_DST_NAT_DONE_BIT: ip_conntrack_status =
    ip_conntrack_status::IPS_CONFIRMED;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ip_conntrack_status {
    IPS_EXPECTED_BIT = 0,
    IPS_EXPECTED = 1,
    IPS_SEEN_REPLY = 2,
    IPS_ASSURED = 4,
    IPS_CONFIRMED_BIT = 3,
    IPS_CONFIRMED = 8,
    IPS_SRC_NAT = 16,
    IPS_DST_NAT_BIT = 5,
    IPS_DST_NAT = 32,
    IPS_NAT_MASK = 48,
    IPS_SEQ_ADJUST_BIT = 6,
    IPS_SEQ_ADJUST = 64,
    IPS_SRC_NAT_DONE_BIT = 7,
    IPS_SRC_NAT_DONE = 128,
    IPS_DST_NAT_DONE = 256,
    IPS_NAT_DONE_MASK = 384,
    IPS_DYING_BIT = 9,
    IPS_DYING = 512,
    IPS_FIXED_TIMEOUT_BIT = 10,
    IPS_FIXED_TIMEOUT = 1024,
    IPS_TEMPLATE_BIT = 11,
    IPS_TEMPLATE = 2048,
    IPS_UNTRACKED_BIT = 12,
    IPS_UNTRACKED = 4096,
    IPS_HELPER_BIT = 13,
    IPS_HELPER = 8192,
}
pub const IPCT_NATSEQADJ: ip_conntrack_events =
    ip_conntrack_events::IPCT_SEQADJ;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ip_conntrack_events {
    IPCT_NEW = 0,
    IPCT_RELATED = 1,
    IPCT_DESTROY = 2,
    IPCT_REPLY = 3,
    IPCT_ASSURED = 4,
    IPCT_PROTOINFO = 5,
    IPCT_HELPER = 6,
    IPCT_MARK = 7,
    IPCT_SEQADJ = 8,
    IPCT_SECMARK = 9,
    IPCT_LABEL = 10,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ip_conntrack_expect_events { IPEXP_NEW = 0, IPEXP_DESTROY = 1, }

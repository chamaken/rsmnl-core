/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type __s8 = ::std::os::raw::c_char;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __kernel_fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __kernel_sighandler_t =
    ::std::option::Option<extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __kernel_fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nfattr {
    pub nfa_len: __u16,
    pub nfa_type: __u16,
}
impl ::std::default::Default for nfattr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum nfnetlink_groups {
    NFNLGRP_NONE = 0,
    NFNLGRP_CONNTRACK_NEW = 1,
    NFNLGRP_CONNTRACK_UPDATE = 2,
    NFNLGRP_CONNTRACK_DESTROY = 3,
    NFNLGRP_CONNTRACK_EXP_NEW = 4,
    NFNLGRP_CONNTRACK_EXP_UPDATE = 5,
    NFNLGRP_CONNTRACK_EXP_DESTROY = 6,
    NFNLGRP_NFTABLES = 7,
    NFNLGRP_ACCT_QUOTA = 8,
    NFNLGRP_NFTRACE = 9,
    __NFNLGRP_MAX = 10,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct nfgenmsg {
    pub nfgen_family: __u8,
    pub version: __u8,
    pub res_id: __be16,
}
impl ::std::default::Default for nfgenmsg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum cntl_msg_types {
    IPCTNL_MSG_CT_NEW = 0,
    IPCTNL_MSG_CT_GET = 1,
    IPCTNL_MSG_CT_DELETE = 2,
    IPCTNL_MSG_CT_GET_CTRZERO = 3,
    IPCTNL_MSG_CT_GET_STATS_CPU = 4,
    IPCTNL_MSG_CT_GET_STATS = 5,
    IPCTNL_MSG_CT_GET_DYING = 6,
    IPCTNL_MSG_CT_GET_UNCONFIRMED = 7,
    IPCTNL_MSG_MAX = 8,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctnl_exp_msg_types {
    IPCTNL_MSG_EXP_NEW = 0,
    IPCTNL_MSG_EXP_GET = 1,
    IPCTNL_MSG_EXP_DELETE = 2,
    IPCTNL_MSG_EXP_GET_STATS_CPU = 3,
    IPCTNL_MSG_EXP_MAX = 4,
}
pub const CTA_NAT_SEQ_ADJ_ORIG: ctattr_type = ctattr_type::CTA_SEQ_ADJ_ORIG;
pub const CTA_NAT_SEQ_ADJ_REPLY: ctattr_type = ctattr_type::CTA_SEQ_ADJ_REPLY;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_type {
    CTA_UNSPEC = 0,
    CTA_TUPLE_ORIG = 1,
    CTA_TUPLE_REPLY = 2,
    CTA_STATUS = 3,
    CTA_PROTOINFO = 4,
    CTA_HELP = 5,
    CTA_NAT_SRC = 6,
    CTA_TIMEOUT = 7,
    CTA_MARK = 8,
    CTA_COUNTERS_ORIG = 9,
    CTA_COUNTERS_REPLY = 10,
    CTA_USE = 11,
    CTA_ID = 12,
    CTA_NAT_DST = 13,
    CTA_TUPLE_MASTER = 14,
    CTA_SEQ_ADJ_ORIG = 15,
    CTA_SEQ_ADJ_REPLY = 16,
    CTA_SECMARK = 17,
    CTA_ZONE = 18,
    CTA_SECCTX = 19,
    CTA_TIMESTAMP = 20,
    CTA_MARK_MASK = 21,
    CTA_LABELS = 22,
    CTA_LABELS_MASK = 23,
    __CTA_MAX = 24,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_tuple {
    CTA_TUPLE_UNSPEC = 0,
    CTA_TUPLE_IP = 1,
    CTA_TUPLE_PROTO = 2,
    CTA_TUPLE_ZONE = 3,
    __CTA_TUPLE_MAX = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_ip {
    CTA_IP_UNSPEC = 0,
    CTA_IP_V4_SRC = 1,
    CTA_IP_V4_DST = 2,
    CTA_IP_V6_SRC = 3,
    CTA_IP_V6_DST = 4,
    __CTA_IP_MAX = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_l4proto {
    CTA_PROTO_UNSPEC = 0,
    CTA_PROTO_NUM = 1,
    CTA_PROTO_SRC_PORT = 2,
    CTA_PROTO_DST_PORT = 3,
    CTA_PROTO_ICMP_ID = 4,
    CTA_PROTO_ICMP_TYPE = 5,
    CTA_PROTO_ICMP_CODE = 6,
    CTA_PROTO_ICMPV6_ID = 7,
    CTA_PROTO_ICMPV6_TYPE = 8,
    CTA_PROTO_ICMPV6_CODE = 9,
    __CTA_PROTO_MAX = 10,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_protoinfo {
    CTA_PROTOINFO_UNSPEC = 0,
    CTA_PROTOINFO_TCP = 1,
    CTA_PROTOINFO_DCCP = 2,
    CTA_PROTOINFO_SCTP = 3,
    __CTA_PROTOINFO_MAX = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_protoinfo_tcp {
    CTA_PROTOINFO_TCP_UNSPEC = 0,
    CTA_PROTOINFO_TCP_STATE = 1,
    CTA_PROTOINFO_TCP_WSCALE_ORIGINAL = 2,
    CTA_PROTOINFO_TCP_WSCALE_REPLY = 3,
    CTA_PROTOINFO_TCP_FLAGS_ORIGINAL = 4,
    CTA_PROTOINFO_TCP_FLAGS_REPLY = 5,
    __CTA_PROTOINFO_TCP_MAX = 6,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_protoinfo_dccp {
    CTA_PROTOINFO_DCCP_UNSPEC = 0,
    CTA_PROTOINFO_DCCP_STATE = 1,
    CTA_PROTOINFO_DCCP_ROLE = 2,
    CTA_PROTOINFO_DCCP_HANDSHAKE_SEQ = 3,
    CTA_PROTOINFO_DCCP_PAD = 4,
    __CTA_PROTOINFO_DCCP_MAX = 5,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_protoinfo_sctp {
    CTA_PROTOINFO_SCTP_UNSPEC = 0,
    CTA_PROTOINFO_SCTP_STATE = 1,
    CTA_PROTOINFO_SCTP_VTAG_ORIGINAL = 2,
    CTA_PROTOINFO_SCTP_VTAG_REPLY = 3,
    __CTA_PROTOINFO_SCTP_MAX = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_counters {
    CTA_COUNTERS_UNSPEC = 0,
    CTA_COUNTERS_PACKETS = 1,
    CTA_COUNTERS_BYTES = 2,
    CTA_COUNTERS32_PACKETS = 3,
    CTA_COUNTERS32_BYTES = 4,
    CTA_COUNTERS_PAD = 5,
    __CTA_COUNTERS_MAX = 6,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_tstamp {
    CTA_TIMESTAMP_UNSPEC = 0,
    CTA_TIMESTAMP_START = 1,
    CTA_TIMESTAMP_STOP = 2,
    CTA_TIMESTAMP_PAD = 3,
    __CTA_TIMESTAMP_MAX = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_nat {
    CTA_NAT_UNSPEC = 0,
    CTA_NAT_V4_MINIP = 1,
    CTA_NAT_V4_MAXIP = 2,
    CTA_NAT_PROTO = 3,
    CTA_NAT_V6_MINIP = 4,
    CTA_NAT_V6_MAXIP = 5,
    __CTA_NAT_MAX = 6,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_protonat {
    CTA_PROTONAT_UNSPEC = 0,
    CTA_PROTONAT_PORT_MIN = 1,
    CTA_PROTONAT_PORT_MAX = 2,
    __CTA_PROTONAT_MAX = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_seqadj {
    CTA_SEQADJ_UNSPEC = 0,
    CTA_SEQADJ_CORRECTION_POS = 1,
    CTA_SEQADJ_OFFSET_BEFORE = 2,
    CTA_SEQADJ_OFFSET_AFTER = 3,
    __CTA_SEQADJ_MAX = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_natseq {
    CTA_NAT_SEQ_UNSPEC = 0,
    CTA_NAT_SEQ_CORRECTION_POS = 1,
    CTA_NAT_SEQ_OFFSET_BEFORE = 2,
    CTA_NAT_SEQ_OFFSET_AFTER = 3,
    __CTA_NAT_SEQ_MAX = 4,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_expect {
    CTA_EXPECT_UNSPEC = 0,
    CTA_EXPECT_MASTER = 1,
    CTA_EXPECT_TUPLE = 2,
    CTA_EXPECT_MASK = 3,
    CTA_EXPECT_TIMEOUT = 4,
    CTA_EXPECT_ID = 5,
    CTA_EXPECT_HELP_NAME = 6,
    CTA_EXPECT_ZONE = 7,
    CTA_EXPECT_FLAGS = 8,
    CTA_EXPECT_CLASS = 9,
    CTA_EXPECT_NAT = 10,
    CTA_EXPECT_FN = 11,
    __CTA_EXPECT_MAX = 12,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_expect_nat {
    CTA_EXPECT_NAT_UNSPEC = 0,
    CTA_EXPECT_NAT_DIR = 1,
    CTA_EXPECT_NAT_TUPLE = 2,
    __CTA_EXPECT_NAT_MAX = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_help {
    CTA_HELP_UNSPEC = 0,
    CTA_HELP_NAME = 1,
    CTA_HELP_INFO = 2,
    __CTA_HELP_MAX = 3,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_secctx {
    CTA_SECCTX_UNSPEC = 0,
    CTA_SECCTX_NAME = 1,
    __CTA_SECCTX_MAX = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_stats_cpu {
    CTA_STATS_UNSPEC = 0,
    CTA_STATS_SEARCHED = 1,
    CTA_STATS_FOUND = 2,
    CTA_STATS_NEW = 3,
    CTA_STATS_INVALID = 4,
    CTA_STATS_IGNORE = 5,
    CTA_STATS_DELETE = 6,
    CTA_STATS_DELETE_LIST = 7,
    CTA_STATS_INSERT = 8,
    CTA_STATS_INSERT_FAILED = 9,
    CTA_STATS_DROP = 10,
    CTA_STATS_EARLY_DROP = 11,
    CTA_STATS_ERROR = 12,
    CTA_STATS_SEARCH_RESTART = 13,
    __CTA_STATS_MAX = 14,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_stats_global {
    CTA_STATS_GLOBAL_UNSPEC = 0,
    CTA_STATS_GLOBAL_ENTRIES = 1,
    __CTA_STATS_GLOBAL_MAX = 2,
}
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum ctattr_expect_stats {
    CTA_STATS_EXP_UNSPEC = 0,
    CTA_STATS_EXP_NEW = 1,
    CTA_STATS_EXP_CREATE = 2,
    CTA_STATS_EXP_DELETE = 3,
    __CTA_STATS_EXP_MAX = 4,
}

/* automatically generated by rust-bindgen 0.56.0 */

pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const IP_CT_TCP_FLAG_WINDOW_SCALE: u32 = 1;
pub const IP_CT_TCP_FLAG_SACK_PERM: u32 = 2;
pub const IP_CT_TCP_FLAG_CLOSE_INIT: u32 = 4;
pub const IP_CT_TCP_FLAG_BE_LIBERAL: u32 = 8;
pub const IP_CT_TCP_FLAG_DATA_UNACKNOWLEDGED: u32 = 16;
pub const IP_CT_TCP_FLAG_MAXACK_SET: u32 = 32;
pub const IP_CT_EXP_CHALLENGE_ACK: u32 = 64;
pub const IP_CT_TCP_SIMULTANEOUS_OPEN: u32 = 128;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub const tcp_conntrack_TCP_CONNTRACK_NONE: tcp_conntrack = 0;
pub const tcp_conntrack_TCP_CONNTRACK_SYN_SENT: tcp_conntrack = 1;
pub const tcp_conntrack_TCP_CONNTRACK_SYN_RECV: tcp_conntrack = 2;
pub const tcp_conntrack_TCP_CONNTRACK_ESTABLISHED: tcp_conntrack = 3;
pub const tcp_conntrack_TCP_CONNTRACK_FIN_WAIT: tcp_conntrack = 4;
pub const tcp_conntrack_TCP_CONNTRACK_CLOSE_WAIT: tcp_conntrack = 5;
pub const tcp_conntrack_TCP_CONNTRACK_LAST_ACK: tcp_conntrack = 6;
pub const tcp_conntrack_TCP_CONNTRACK_TIME_WAIT: tcp_conntrack = 7;
pub const tcp_conntrack_TCP_CONNTRACK_CLOSE: tcp_conntrack = 8;
pub const tcp_conntrack_TCP_CONNTRACK_LISTEN: tcp_conntrack = 9;
pub const tcp_conntrack_TCP_CONNTRACK_MAX: tcp_conntrack = 10;
pub const tcp_conntrack_TCP_CONNTRACK_IGNORE: tcp_conntrack = 11;
pub const tcp_conntrack_TCP_CONNTRACK_RETRANS: tcp_conntrack = 12;
pub const tcp_conntrack_TCP_CONNTRACK_UNACK: tcp_conntrack = 13;
pub const tcp_conntrack_TCP_CONNTRACK_TIMEOUT_MAX: tcp_conntrack = 14;
pub type tcp_conntrack = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nf_ct_tcp_flags {
    pub flags: __u8,
    pub mask: __u8,
}
#[test]
fn bindgen_test_layout_nf_ct_tcp_flags() {
    assert_eq!(
        ::std::mem::size_of::<nf_ct_tcp_flags>(),
        2usize,
        concat!("Size of: ", stringify!(nf_ct_tcp_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<nf_ct_tcp_flags>(),
        1usize,
        concat!("Alignment of ", stringify!(nf_ct_tcp_flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nf_ct_tcp_flags>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nf_ct_tcp_flags),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nf_ct_tcp_flags>())).mask as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(nf_ct_tcp_flags),
            "::",
            stringify!(mask)
        )
    );
}

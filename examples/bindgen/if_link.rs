/* automatically generated by rust-bindgen 0.56.0 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const SI_LOAD_SHIFT: u32 = 16;
pub const _K_SS_MAXSIZE: u32 = 128;
pub const NETLINK_ROUTE: u32 = 0;
pub const NETLINK_UNUSED: u32 = 1;
pub const NETLINK_USERSOCK: u32 = 2;
pub const NETLINK_FIREWALL: u32 = 3;
pub const NETLINK_SOCK_DIAG: u32 = 4;
pub const NETLINK_NFLOG: u32 = 5;
pub const NETLINK_XFRM: u32 = 6;
pub const NETLINK_SELINUX: u32 = 7;
pub const NETLINK_ISCSI: u32 = 8;
pub const NETLINK_AUDIT: u32 = 9;
pub const NETLINK_FIB_LOOKUP: u32 = 10;
pub const NETLINK_CONNECTOR: u32 = 11;
pub const NETLINK_NETFILTER: u32 = 12;
pub const NETLINK_IP6_FW: u32 = 13;
pub const NETLINK_DNRTMSG: u32 = 14;
pub const NETLINK_KOBJECT_UEVENT: u32 = 15;
pub const NETLINK_GENERIC: u32 = 16;
pub const NETLINK_SCSITRANSPORT: u32 = 18;
pub const NETLINK_ECRYPTFS: u32 = 19;
pub const NETLINK_RDMA: u32 = 20;
pub const NETLINK_CRYPTO: u32 = 21;
pub const NETLINK_SMC: u32 = 22;
pub const NETLINK_INET_DIAG: u32 = 4;
pub const MAX_LINKS: u32 = 32;
pub const NLM_F_REQUEST: u32 = 1;
pub const NLM_F_MULTI: u32 = 2;
pub const NLM_F_ACK: u32 = 4;
pub const NLM_F_ECHO: u32 = 8;
pub const NLM_F_DUMP_INTR: u32 = 16;
pub const NLM_F_DUMP_FILTERED: u32 = 32;
pub const NLM_F_ROOT: u32 = 256;
pub const NLM_F_MATCH: u32 = 512;
pub const NLM_F_ATOMIC: u32 = 1024;
pub const NLM_F_DUMP: u32 = 768;
pub const NLM_F_REPLACE: u32 = 256;
pub const NLM_F_EXCL: u32 = 512;
pub const NLM_F_CREATE: u32 = 1024;
pub const NLM_F_APPEND: u32 = 2048;
pub const NLM_F_NONREC: u32 = 256;
pub const NLM_F_CAPPED: u32 = 256;
pub const NLM_F_ACK_TLVS: u32 = 512;
pub const NLMSG_ALIGNTO: u32 = 4;
pub const NLMSG_NOOP: u32 = 1;
pub const NLMSG_ERROR: u32 = 2;
pub const NLMSG_DONE: u32 = 3;
pub const NLMSG_OVERRUN: u32 = 4;
pub const NLMSG_MIN_TYPE: u32 = 16;
pub const NETLINK_ADD_MEMBERSHIP: u32 = 1;
pub const NETLINK_DROP_MEMBERSHIP: u32 = 2;
pub const NETLINK_PKTINFO: u32 = 3;
pub const NETLINK_BROADCAST_ERROR: u32 = 4;
pub const NETLINK_NO_ENOBUFS: u32 = 5;
pub const NETLINK_RX_RING: u32 = 6;
pub const NETLINK_TX_RING: u32 = 7;
pub const NETLINK_LISTEN_ALL_NSID: u32 = 8;
pub const NETLINK_LIST_MEMBERSHIPS: u32 = 9;
pub const NETLINK_CAP_ACK: u32 = 10;
pub const NETLINK_EXT_ACK: u32 = 11;
pub const NETLINK_GET_STRICT_CHK: u32 = 12;
pub const NL_MMAP_MSG_ALIGNMENT: u32 = 4;
pub const NET_MAJOR: u32 = 36;
pub const NLA_F_NESTED: u32 = 32768;
pub const NLA_F_NET_BYTEORDER: u32 = 16384;
pub const NLA_TYPE_MASK: i32 = -49153;
pub const NLA_ALIGNTO: u32 = 4;
pub const MACVLAN_FLAG_NOPROMISC: u32 = 1;
pub const IPVLAN_F_PRIVATE: u32 = 1;
pub const IPVLAN_F_VEPA: u32 = 2;
pub const MAX_VLAN_LIST_LEN: u32 = 1;
pub const PORT_PROFILE_MAX: u32 = 40;
pub const PORT_UUID_MAX: u32 = 16;
pub const PORT_SELF_VF: i32 = -1;
pub const XDP_FLAGS_UPDATE_IF_NOEXIST: u32 = 1;
pub const XDP_FLAGS_SKB_MODE: u32 = 2;
pub const XDP_FLAGS_DRV_MODE: u32 = 4;
pub const XDP_FLAGS_HW_MODE: u32 = 8;
pub const XDP_FLAGS_REPLACE: u32 = 16;
pub const XDP_FLAGS_MODES: u32 = 14;
pub const XDP_FLAGS_MASK: u32 = 31;
pub const RMNET_FLAGS_INGRESS_DEAGGREGATION: u32 = 1;
pub const RMNET_FLAGS_INGRESS_MAP_COMMANDS: u32 = 2;
pub const RMNET_FLAGS_INGRESS_MAP_CKSUMV4: u32 = 4;
pub const RMNET_FLAGS_EGRESS_MAP_CKSUMV4: u32 = 8;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug)]
pub struct sysinfo {
    pub uptime: __kernel_long_t,
    pub loads: [__kernel_ulong_t; 3usize],
    pub totalram: __kernel_ulong_t,
    pub freeram: __kernel_ulong_t,
    pub sharedram: __kernel_ulong_t,
    pub bufferram: __kernel_ulong_t,
    pub totalswap: __kernel_ulong_t,
    pub freeswap: __kernel_ulong_t,
    pub procs: __u16,
    pub pad: __u16,
    pub totalhigh: __kernel_ulong_t,
    pub freehigh: __kernel_ulong_t,
    pub mem_unit: __u32,
    pub _f: __IncompleteArrayField<::std::os::raw::c_char>,
}
#[test]
fn bindgen_test_layout_sysinfo() {
    assert_eq!(
        ::std::mem::size_of::<sysinfo>(),
        112usize,
        concat!("Size of: ", stringify!(sysinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<sysinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(sysinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).uptime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(uptime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).loads as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(loads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).totalram as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).freeram as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freeram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).sharedram as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(sharedram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).bufferram as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(bufferram)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).totalswap as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).freeswap as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freeswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).procs as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(procs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).pad as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).totalhigh as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(totalhigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).freehigh as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(freehigh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>())).mem_unit as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(mem_unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sysinfo>()))._f as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(sysinfo),
            "::",
            stringify!(_f)
        )
    );
}
pub type __kernel_sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_sockaddr_storage {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __kernel_sockaddr_storage__bindgen_ty_1 {
    pub __bindgen_anon_1: __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1,
    pub __align: *mut ::std::os::raw::c_void,
    _bindgen_union_align: [u64; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1 {
    pub ss_family: __kernel_sa_family_t,
    pub __data: [::std::os::raw::c_char; 126usize],
}
#[test]
fn bindgen_test_layout___kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>()))
                .ss_family as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1>())).__data
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__data)
        )
    );
}
#[test]
fn bindgen_test_layout___kernel_sockaddr_storage__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_sockaddr_storage__bindgen_ty_1>(),
        128usize,
        concat!(
            "Size of: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_sockaddr_storage__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_sockaddr_storage__bindgen_ty_1>())).__align as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage__bindgen_ty_1),
            "::",
            stringify!(__align)
        )
    );
}
#[test]
fn bindgen_test_layout___kernel_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_sockaddr_storage))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_nl {
    pub nl_family: __kernel_sa_family_t,
    pub nl_pad: ::std::os::raw::c_ushort,
    pub nl_pid: __u32,
    pub nl_groups: __u32,
}
#[test]
fn bindgen_test_layout_sockaddr_nl() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_nl>(),
        12usize,
        concat!("Size of: ", stringify!(sockaddr_nl))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_nl>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_nl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_pad as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_pid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_groups as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_groups)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlmsghdr {
    pub nlmsg_len: __u32,
    pub nlmsg_type: __u16,
    pub nlmsg_flags: __u16,
    pub nlmsg_seq: __u32,
    pub nlmsg_pid: __u32,
}
#[test]
fn bindgen_test_layout_nlmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<nlmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(nlmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<nlmsghdr>(),
        4usize,
        concat!("Alignment of ", stringify!(nlmsghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_flags as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_seq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlmsgerr {
    pub error: ::std::os::raw::c_int,
    pub msg: nlmsghdr,
}
#[test]
fn bindgen_test_layout_nlmsgerr() {
    assert_eq!(
        ::std::mem::size_of::<nlmsgerr>(),
        20usize,
        concat!("Size of: ", stringify!(nlmsgerr))
    );
    assert_eq!(
        ::std::mem::align_of::<nlmsgerr>(),
        4usize,
        concat!("Alignment of ", stringify!(nlmsgerr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsgerr>())).error as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsgerr),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsgerr>())).msg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsgerr),
            "::",
            stringify!(msg)
        )
    );
}
pub const nlmsgerr_attrs_NLMSGERR_ATTR_UNUSED: nlmsgerr_attrs = 0;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_MSG: nlmsgerr_attrs = 1;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_OFFS: nlmsgerr_attrs = 2;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_COOKIE: nlmsgerr_attrs = 3;
pub const nlmsgerr_attrs___NLMSGERR_ATTR_MAX: nlmsgerr_attrs = 4;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_MAX: nlmsgerr_attrs = 3;
pub type nlmsgerr_attrs = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_pktinfo {
    pub group: __u32,
}
#[test]
fn bindgen_test_layout_nl_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<nl_pktinfo>(),
        4usize,
        concat!("Size of: ", stringify!(nl_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<nl_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(nl_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_pktinfo>())).group as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_pktinfo),
            "::",
            stringify!(group)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_mmap_req {
    pub nm_block_size: ::std::os::raw::c_uint,
    pub nm_block_nr: ::std::os::raw::c_uint,
    pub nm_frame_size: ::std::os::raw::c_uint,
    pub nm_frame_nr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_nl_mmap_req() {
    assert_eq!(
        ::std::mem::size_of::<nl_mmap_req>(),
        16usize,
        concat!("Size of: ", stringify!(nl_mmap_req))
    );
    assert_eq!(
        ::std::mem::align_of::<nl_mmap_req>(),
        4usize,
        concat!("Alignment of ", stringify!(nl_mmap_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_block_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_block_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_block_nr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_block_nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_frame_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_frame_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_frame_nr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_frame_nr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_mmap_hdr {
    pub nm_status: ::std::os::raw::c_uint,
    pub nm_len: ::std::os::raw::c_uint,
    pub nm_group: __u32,
    pub nm_pid: __u32,
    pub nm_uid: __u32,
    pub nm_gid: __u32,
}
#[test]
fn bindgen_test_layout_nl_mmap_hdr() {
    assert_eq!(
        ::std::mem::size_of::<nl_mmap_hdr>(),
        24usize,
        concat!("Size of: ", stringify!(nl_mmap_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<nl_mmap_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(nl_mmap_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_gid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_gid)
        )
    );
}
pub const nl_mmap_status_NL_MMAP_STATUS_UNUSED: nl_mmap_status = 0;
pub const nl_mmap_status_NL_MMAP_STATUS_RESERVED: nl_mmap_status = 1;
pub const nl_mmap_status_NL_MMAP_STATUS_VALID: nl_mmap_status = 2;
pub const nl_mmap_status_NL_MMAP_STATUS_COPY: nl_mmap_status = 3;
pub const nl_mmap_status_NL_MMAP_STATUS_SKIP: nl_mmap_status = 4;
pub type nl_mmap_status = ::std::os::raw::c_uint;
pub const NETLINK_UNCONNECTED: ::std::os::raw::c_uint = 0;
pub const NETLINK_CONNECTED: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlattr {
    pub nla_len: __u16,
    pub nla_type: __u16,
}
#[test]
fn bindgen_test_layout_nlattr() {
    assert_eq!(
        ::std::mem::size_of::<nlattr>(),
        4usize,
        concat!("Size of: ", stringify!(nlattr))
    );
    assert_eq!(
        ::std::mem::align_of::<nlattr>(),
        2usize,
        concat!("Alignment of ", stringify!(nlattr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlattr>())).nla_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nlattr),
            "::",
            stringify!(nla_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlattr>())).nla_type as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nlattr),
            "::",
            stringify!(nla_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nla_bitfield32 {
    pub value: __u32,
    pub selector: __u32,
}
#[test]
fn bindgen_test_layout_nla_bitfield32() {
    assert_eq!(
        ::std::mem::size_of::<nla_bitfield32>(),
        8usize,
        concat!("Size of: ", stringify!(nla_bitfield32))
    );
    assert_eq!(
        ::std::mem::align_of::<nla_bitfield32>(),
        4usize,
        concat!("Alignment of ", stringify!(nla_bitfield32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nla_bitfield32>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nla_bitfield32),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nla_bitfield32>())).selector as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nla_bitfield32),
            "::",
            stringify!(selector)
        )
    );
}
pub const netlink_attribute_type_NL_ATTR_TYPE_INVALID: netlink_attribute_type = 0;
pub const netlink_attribute_type_NL_ATTR_TYPE_FLAG: netlink_attribute_type = 1;
pub const netlink_attribute_type_NL_ATTR_TYPE_U8: netlink_attribute_type = 2;
pub const netlink_attribute_type_NL_ATTR_TYPE_U16: netlink_attribute_type = 3;
pub const netlink_attribute_type_NL_ATTR_TYPE_U32: netlink_attribute_type = 4;
pub const netlink_attribute_type_NL_ATTR_TYPE_U64: netlink_attribute_type = 5;
pub const netlink_attribute_type_NL_ATTR_TYPE_S8: netlink_attribute_type = 6;
pub const netlink_attribute_type_NL_ATTR_TYPE_S16: netlink_attribute_type = 7;
pub const netlink_attribute_type_NL_ATTR_TYPE_S32: netlink_attribute_type = 8;
pub const netlink_attribute_type_NL_ATTR_TYPE_S64: netlink_attribute_type = 9;
pub const netlink_attribute_type_NL_ATTR_TYPE_BINARY: netlink_attribute_type = 10;
pub const netlink_attribute_type_NL_ATTR_TYPE_STRING: netlink_attribute_type = 11;
pub const netlink_attribute_type_NL_ATTR_TYPE_NUL_STRING: netlink_attribute_type = 12;
pub const netlink_attribute_type_NL_ATTR_TYPE_NESTED: netlink_attribute_type = 13;
pub const netlink_attribute_type_NL_ATTR_TYPE_NESTED_ARRAY: netlink_attribute_type = 14;
pub const netlink_attribute_type_NL_ATTR_TYPE_BITFIELD32: netlink_attribute_type = 15;
pub type netlink_attribute_type = ::std::os::raw::c_uint;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_UNSPEC: netlink_policy_type_attr = 0;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_TYPE: netlink_policy_type_attr = 1;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MIN_VALUE_S: netlink_policy_type_attr = 2;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MAX_VALUE_S: netlink_policy_type_attr = 3;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MIN_VALUE_U: netlink_policy_type_attr = 4;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MAX_VALUE_U: netlink_policy_type_attr = 5;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MIN_LENGTH: netlink_policy_type_attr = 6;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MAX_LENGTH: netlink_policy_type_attr = 7;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_POLICY_IDX: netlink_policy_type_attr = 8;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_POLICY_MAXTYPE: netlink_policy_type_attr = 9;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_BITFIELD32_MASK: netlink_policy_type_attr =
    10;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_PAD: netlink_policy_type_attr = 11;
pub const netlink_policy_type_attr___NL_POLICY_TYPE_ATTR_MAX: netlink_policy_type_attr = 12;
pub const netlink_policy_type_attr_NL_POLICY_TYPE_ATTR_MAX: netlink_policy_type_attr = 11;
pub type netlink_policy_type_attr = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtnl_link_stats {
    pub rx_packets: __u32,
    pub tx_packets: __u32,
    pub rx_bytes: __u32,
    pub tx_bytes: __u32,
    pub rx_errors: __u32,
    pub tx_errors: __u32,
    pub rx_dropped: __u32,
    pub tx_dropped: __u32,
    pub multicast: __u32,
    pub collisions: __u32,
    pub rx_length_errors: __u32,
    pub rx_over_errors: __u32,
    pub rx_crc_errors: __u32,
    pub rx_frame_errors: __u32,
    pub rx_fifo_errors: __u32,
    pub rx_missed_errors: __u32,
    pub tx_aborted_errors: __u32,
    pub tx_carrier_errors: __u32,
    pub tx_fifo_errors: __u32,
    pub tx_heartbeat_errors: __u32,
    pub tx_window_errors: __u32,
    pub rx_compressed: __u32,
    pub tx_compressed: __u32,
    pub rx_nohandler: __u32,
}
#[test]
fn bindgen_test_layout_rtnl_link_stats() {
    assert_eq!(
        ::std::mem::size_of::<rtnl_link_stats>(),
        96usize,
        concat!("Size of: ", stringify!(rtnl_link_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<rtnl_link_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(rtnl_link_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_packets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_packets as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_bytes as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_errors as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_errors as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_dropped as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_dropped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_dropped as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_dropped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).multicast as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(multicast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).collisions as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(collisions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).rx_length_errors as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_length_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_over_errors as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_over_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_crc_errors as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_crc_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_frame_errors as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_frame_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_fifo_errors as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_fifo_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).rx_missed_errors as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_missed_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).tx_aborted_errors as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_aborted_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).tx_carrier_errors as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_carrier_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_fifo_errors as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_fifo_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).tx_heartbeat_errors as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_heartbeat_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).tx_window_errors as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_window_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_compressed as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_compressed as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_nohandler as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_nohandler)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtnl_link_stats64 {
    pub rx_packets: __u64,
    pub tx_packets: __u64,
    pub rx_bytes: __u64,
    pub tx_bytes: __u64,
    pub rx_errors: __u64,
    pub tx_errors: __u64,
    pub rx_dropped: __u64,
    pub tx_dropped: __u64,
    pub multicast: __u64,
    pub collisions: __u64,
    pub rx_length_errors: __u64,
    pub rx_over_errors: __u64,
    pub rx_crc_errors: __u64,
    pub rx_frame_errors: __u64,
    pub rx_fifo_errors: __u64,
    pub rx_missed_errors: __u64,
    pub tx_aborted_errors: __u64,
    pub tx_carrier_errors: __u64,
    pub tx_fifo_errors: __u64,
    pub tx_heartbeat_errors: __u64,
    pub tx_window_errors: __u64,
    pub rx_compressed: __u64,
    pub tx_compressed: __u64,
    pub rx_nohandler: __u64,
}
#[test]
fn bindgen_test_layout_rtnl_link_stats64() {
    assert_eq!(
        ::std::mem::size_of::<rtnl_link_stats64>(),
        192usize,
        concat!("Size of: ", stringify!(rtnl_link_stats64))
    );
    assert_eq!(
        ::std::mem::align_of::<rtnl_link_stats64>(),
        8usize,
        concat!("Alignment of ", stringify!(rtnl_link_stats64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_packets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_packets as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_bytes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_bytes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_errors as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_errors as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_dropped as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_dropped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_dropped as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_dropped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).multicast as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(multicast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).collisions as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(collisions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_length_errors as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_length_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_over_errors as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_over_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_crc_errors as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_crc_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_frame_errors as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_frame_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_fifo_errors as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_fifo_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_missed_errors as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_missed_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_aborted_errors as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_aborted_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_carrier_errors as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_carrier_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_fifo_errors as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_fifo_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_heartbeat_errors as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_heartbeat_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_window_errors as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_window_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_compressed as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_compressed as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_nohandler as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_nohandler)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtnl_link_ifmap {
    pub mem_start: __u64,
    pub mem_end: __u64,
    pub base_addr: __u64,
    pub irq: __u16,
    pub dma: __u8,
    pub port: __u8,
}
#[test]
fn bindgen_test_layout_rtnl_link_ifmap() {
    assert_eq!(
        ::std::mem::size_of::<rtnl_link_ifmap>(),
        32usize,
        concat!("Size of: ", stringify!(rtnl_link_ifmap))
    );
    assert_eq!(
        ::std::mem::align_of::<rtnl_link_ifmap>(),
        8usize,
        concat!("Alignment of ", stringify!(rtnl_link_ifmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).mem_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(mem_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).mem_end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(mem_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).base_addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(base_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).irq as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).dma as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(dma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).port as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(port)
        )
    );
}
pub const IFLA_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_ADDRESS: ::std::os::raw::c_uint = 1;
pub const IFLA_BROADCAST: ::std::os::raw::c_uint = 2;
pub const IFLA_IFNAME: ::std::os::raw::c_uint = 3;
pub const IFLA_MTU: ::std::os::raw::c_uint = 4;
pub const IFLA_LINK: ::std::os::raw::c_uint = 5;
pub const IFLA_QDISC: ::std::os::raw::c_uint = 6;
pub const IFLA_STATS: ::std::os::raw::c_uint = 7;
pub const IFLA_COST: ::std::os::raw::c_uint = 8;
pub const IFLA_PRIORITY: ::std::os::raw::c_uint = 9;
pub const IFLA_MASTER: ::std::os::raw::c_uint = 10;
pub const IFLA_WIRELESS: ::std::os::raw::c_uint = 11;
pub const IFLA_PROTINFO: ::std::os::raw::c_uint = 12;
pub const IFLA_TXQLEN: ::std::os::raw::c_uint = 13;
pub const IFLA_MAP: ::std::os::raw::c_uint = 14;
pub const IFLA_WEIGHT: ::std::os::raw::c_uint = 15;
pub const IFLA_OPERSTATE: ::std::os::raw::c_uint = 16;
pub const IFLA_LINKMODE: ::std::os::raw::c_uint = 17;
pub const IFLA_LINKINFO: ::std::os::raw::c_uint = 18;
pub const IFLA_NET_NS_PID: ::std::os::raw::c_uint = 19;
pub const IFLA_IFALIAS: ::std::os::raw::c_uint = 20;
pub const IFLA_NUM_VF: ::std::os::raw::c_uint = 21;
pub const IFLA_VFINFO_LIST: ::std::os::raw::c_uint = 22;
pub const IFLA_STATS64: ::std::os::raw::c_uint = 23;
pub const IFLA_VF_PORTS: ::std::os::raw::c_uint = 24;
pub const IFLA_PORT_SELF: ::std::os::raw::c_uint = 25;
pub const IFLA_AF_SPEC: ::std::os::raw::c_uint = 26;
pub const IFLA_GROUP: ::std::os::raw::c_uint = 27;
pub const IFLA_NET_NS_FD: ::std::os::raw::c_uint = 28;
pub const IFLA_EXT_MASK: ::std::os::raw::c_uint = 29;
pub const IFLA_PROMISCUITY: ::std::os::raw::c_uint = 30;
pub const IFLA_NUM_TX_QUEUES: ::std::os::raw::c_uint = 31;
pub const IFLA_NUM_RX_QUEUES: ::std::os::raw::c_uint = 32;
pub const IFLA_CARRIER: ::std::os::raw::c_uint = 33;
pub const IFLA_PHYS_PORT_ID: ::std::os::raw::c_uint = 34;
pub const IFLA_CARRIER_CHANGES: ::std::os::raw::c_uint = 35;
pub const IFLA_PHYS_SWITCH_ID: ::std::os::raw::c_uint = 36;
pub const IFLA_LINK_NETNSID: ::std::os::raw::c_uint = 37;
pub const IFLA_PHYS_PORT_NAME: ::std::os::raw::c_uint = 38;
pub const IFLA_PROTO_DOWN: ::std::os::raw::c_uint = 39;
pub const IFLA_GSO_MAX_SEGS: ::std::os::raw::c_uint = 40;
pub const IFLA_GSO_MAX_SIZE: ::std::os::raw::c_uint = 41;
pub const IFLA_PAD: ::std::os::raw::c_uint = 42;
pub const IFLA_XDP: ::std::os::raw::c_uint = 43;
pub const IFLA_EVENT: ::std::os::raw::c_uint = 44;
pub const IFLA_NEW_NETNSID: ::std::os::raw::c_uint = 45;
pub const IFLA_IF_NETNSID: ::std::os::raw::c_uint = 46;
pub const IFLA_TARGET_NETNSID: ::std::os::raw::c_uint = 46;
pub const IFLA_CARRIER_UP_COUNT: ::std::os::raw::c_uint = 47;
pub const IFLA_CARRIER_DOWN_COUNT: ::std::os::raw::c_uint = 48;
pub const IFLA_NEW_IFINDEX: ::std::os::raw::c_uint = 49;
pub const IFLA_MIN_MTU: ::std::os::raw::c_uint = 50;
pub const IFLA_MAX_MTU: ::std::os::raw::c_uint = 51;
pub const IFLA_PROP_LIST: ::std::os::raw::c_uint = 52;
pub const IFLA_ALT_IFNAME: ::std::os::raw::c_uint = 53;
pub const IFLA_PERM_ADDRESS: ::std::os::raw::c_uint = 54;
pub const IFLA_PROTO_DOWN_REASON: ::std::os::raw::c_uint = 55;
pub const __IFLA_MAX: ::std::os::raw::c_uint = 56;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const IFLA_PROTO_DOWN_REASON_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_PROTO_DOWN_REASON_MASK: ::std::os::raw::c_uint = 1;
pub const IFLA_PROTO_DOWN_REASON_VALUE: ::std::os::raw::c_uint = 2;
pub const __IFLA_PROTO_DOWN_REASON_CNT: ::std::os::raw::c_uint = 3;
pub const IFLA_PROTO_DOWN_REASON_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const IFLA_INET_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_INET_CONF: ::std::os::raw::c_uint = 1;
pub const __IFLA_INET_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const IFLA_INET6_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_INET6_FLAGS: ::std::os::raw::c_uint = 1;
pub const IFLA_INET6_CONF: ::std::os::raw::c_uint = 2;
pub const IFLA_INET6_STATS: ::std::os::raw::c_uint = 3;
pub const IFLA_INET6_MCAST: ::std::os::raw::c_uint = 4;
pub const IFLA_INET6_CACHEINFO: ::std::os::raw::c_uint = 5;
pub const IFLA_INET6_ICMP6STATS: ::std::os::raw::c_uint = 6;
pub const IFLA_INET6_TOKEN: ::std::os::raw::c_uint = 7;
pub const IFLA_INET6_ADDR_GEN_MODE: ::std::os::raw::c_uint = 8;
pub const __IFLA_INET6_MAX: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const in6_addr_gen_mode_IN6_ADDR_GEN_MODE_EUI64: in6_addr_gen_mode = 0;
pub const in6_addr_gen_mode_IN6_ADDR_GEN_MODE_NONE: in6_addr_gen_mode = 1;
pub const in6_addr_gen_mode_IN6_ADDR_GEN_MODE_STABLE_PRIVACY: in6_addr_gen_mode = 2;
pub const in6_addr_gen_mode_IN6_ADDR_GEN_MODE_RANDOM: in6_addr_gen_mode = 3;
pub type in6_addr_gen_mode = ::std::os::raw::c_uint;
pub const IFLA_BR_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_BR_FORWARD_DELAY: ::std::os::raw::c_uint = 1;
pub const IFLA_BR_HELLO_TIME: ::std::os::raw::c_uint = 2;
pub const IFLA_BR_MAX_AGE: ::std::os::raw::c_uint = 3;
pub const IFLA_BR_AGEING_TIME: ::std::os::raw::c_uint = 4;
pub const IFLA_BR_STP_STATE: ::std::os::raw::c_uint = 5;
pub const IFLA_BR_PRIORITY: ::std::os::raw::c_uint = 6;
pub const IFLA_BR_VLAN_FILTERING: ::std::os::raw::c_uint = 7;
pub const IFLA_BR_VLAN_PROTOCOL: ::std::os::raw::c_uint = 8;
pub const IFLA_BR_GROUP_FWD_MASK: ::std::os::raw::c_uint = 9;
pub const IFLA_BR_ROOT_ID: ::std::os::raw::c_uint = 10;
pub const IFLA_BR_BRIDGE_ID: ::std::os::raw::c_uint = 11;
pub const IFLA_BR_ROOT_PORT: ::std::os::raw::c_uint = 12;
pub const IFLA_BR_ROOT_PATH_COST: ::std::os::raw::c_uint = 13;
pub const IFLA_BR_TOPOLOGY_CHANGE: ::std::os::raw::c_uint = 14;
pub const IFLA_BR_TOPOLOGY_CHANGE_DETECTED: ::std::os::raw::c_uint = 15;
pub const IFLA_BR_HELLO_TIMER: ::std::os::raw::c_uint = 16;
pub const IFLA_BR_TCN_TIMER: ::std::os::raw::c_uint = 17;
pub const IFLA_BR_TOPOLOGY_CHANGE_TIMER: ::std::os::raw::c_uint = 18;
pub const IFLA_BR_GC_TIMER: ::std::os::raw::c_uint = 19;
pub const IFLA_BR_GROUP_ADDR: ::std::os::raw::c_uint = 20;
pub const IFLA_BR_FDB_FLUSH: ::std::os::raw::c_uint = 21;
pub const IFLA_BR_MCAST_ROUTER: ::std::os::raw::c_uint = 22;
pub const IFLA_BR_MCAST_SNOOPING: ::std::os::raw::c_uint = 23;
pub const IFLA_BR_MCAST_QUERY_USE_IFADDR: ::std::os::raw::c_uint = 24;
pub const IFLA_BR_MCAST_QUERIER: ::std::os::raw::c_uint = 25;
pub const IFLA_BR_MCAST_HASH_ELASTICITY: ::std::os::raw::c_uint = 26;
pub const IFLA_BR_MCAST_HASH_MAX: ::std::os::raw::c_uint = 27;
pub const IFLA_BR_MCAST_LAST_MEMBER_CNT: ::std::os::raw::c_uint = 28;
pub const IFLA_BR_MCAST_STARTUP_QUERY_CNT: ::std::os::raw::c_uint = 29;
pub const IFLA_BR_MCAST_LAST_MEMBER_INTVL: ::std::os::raw::c_uint = 30;
pub const IFLA_BR_MCAST_MEMBERSHIP_INTVL: ::std::os::raw::c_uint = 31;
pub const IFLA_BR_MCAST_QUERIER_INTVL: ::std::os::raw::c_uint = 32;
pub const IFLA_BR_MCAST_QUERY_INTVL: ::std::os::raw::c_uint = 33;
pub const IFLA_BR_MCAST_QUERY_RESPONSE_INTVL: ::std::os::raw::c_uint = 34;
pub const IFLA_BR_MCAST_STARTUP_QUERY_INTVL: ::std::os::raw::c_uint = 35;
pub const IFLA_BR_NF_CALL_IPTABLES: ::std::os::raw::c_uint = 36;
pub const IFLA_BR_NF_CALL_IP6TABLES: ::std::os::raw::c_uint = 37;
pub const IFLA_BR_NF_CALL_ARPTABLES: ::std::os::raw::c_uint = 38;
pub const IFLA_BR_VLAN_DEFAULT_PVID: ::std::os::raw::c_uint = 39;
pub const IFLA_BR_PAD: ::std::os::raw::c_uint = 40;
pub const IFLA_BR_VLAN_STATS_ENABLED: ::std::os::raw::c_uint = 41;
pub const IFLA_BR_MCAST_STATS_ENABLED: ::std::os::raw::c_uint = 42;
pub const IFLA_BR_MCAST_IGMP_VERSION: ::std::os::raw::c_uint = 43;
pub const IFLA_BR_MCAST_MLD_VERSION: ::std::os::raw::c_uint = 44;
pub const IFLA_BR_VLAN_STATS_PER_PORT: ::std::os::raw::c_uint = 45;
pub const IFLA_BR_MULTI_BOOLOPT: ::std::os::raw::c_uint = 46;
pub const __IFLA_BR_MAX: ::std::os::raw::c_uint = 47;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_bridge_id {
    pub prio: [__u8; 2usize],
    pub addr: [__u8; 6usize],
}
#[test]
fn bindgen_test_layout_ifla_bridge_id() {
    assert_eq!(
        ::std::mem::size_of::<ifla_bridge_id>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_bridge_id))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_bridge_id>(),
        1usize,
        concat!("Alignment of ", stringify!(ifla_bridge_id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_bridge_id>())).prio as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_bridge_id),
            "::",
            stringify!(prio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_bridge_id>())).addr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_bridge_id),
            "::",
            stringify!(addr)
        )
    );
}
pub const BRIDGE_MODE_UNSPEC: ::std::os::raw::c_uint = 0;
pub const BRIDGE_MODE_HAIRPIN: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const IFLA_BRPORT_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_BRPORT_STATE: ::std::os::raw::c_uint = 1;
pub const IFLA_BRPORT_PRIORITY: ::std::os::raw::c_uint = 2;
pub const IFLA_BRPORT_COST: ::std::os::raw::c_uint = 3;
pub const IFLA_BRPORT_MODE: ::std::os::raw::c_uint = 4;
pub const IFLA_BRPORT_GUARD: ::std::os::raw::c_uint = 5;
pub const IFLA_BRPORT_PROTECT: ::std::os::raw::c_uint = 6;
pub const IFLA_BRPORT_FAST_LEAVE: ::std::os::raw::c_uint = 7;
pub const IFLA_BRPORT_LEARNING: ::std::os::raw::c_uint = 8;
pub const IFLA_BRPORT_UNICAST_FLOOD: ::std::os::raw::c_uint = 9;
pub const IFLA_BRPORT_PROXYARP: ::std::os::raw::c_uint = 10;
pub const IFLA_BRPORT_LEARNING_SYNC: ::std::os::raw::c_uint = 11;
pub const IFLA_BRPORT_PROXYARP_WIFI: ::std::os::raw::c_uint = 12;
pub const IFLA_BRPORT_ROOT_ID: ::std::os::raw::c_uint = 13;
pub const IFLA_BRPORT_BRIDGE_ID: ::std::os::raw::c_uint = 14;
pub const IFLA_BRPORT_DESIGNATED_PORT: ::std::os::raw::c_uint = 15;
pub const IFLA_BRPORT_DESIGNATED_COST: ::std::os::raw::c_uint = 16;
pub const IFLA_BRPORT_ID: ::std::os::raw::c_uint = 17;
pub const IFLA_BRPORT_NO: ::std::os::raw::c_uint = 18;
pub const IFLA_BRPORT_TOPOLOGY_CHANGE_ACK: ::std::os::raw::c_uint = 19;
pub const IFLA_BRPORT_CONFIG_PENDING: ::std::os::raw::c_uint = 20;
pub const IFLA_BRPORT_MESSAGE_AGE_TIMER: ::std::os::raw::c_uint = 21;
pub const IFLA_BRPORT_FORWARD_DELAY_TIMER: ::std::os::raw::c_uint = 22;
pub const IFLA_BRPORT_HOLD_TIMER: ::std::os::raw::c_uint = 23;
pub const IFLA_BRPORT_FLUSH: ::std::os::raw::c_uint = 24;
pub const IFLA_BRPORT_MULTICAST_ROUTER: ::std::os::raw::c_uint = 25;
pub const IFLA_BRPORT_PAD: ::std::os::raw::c_uint = 26;
pub const IFLA_BRPORT_MCAST_FLOOD: ::std::os::raw::c_uint = 27;
pub const IFLA_BRPORT_MCAST_TO_UCAST: ::std::os::raw::c_uint = 28;
pub const IFLA_BRPORT_VLAN_TUNNEL: ::std::os::raw::c_uint = 29;
pub const IFLA_BRPORT_BCAST_FLOOD: ::std::os::raw::c_uint = 30;
pub const IFLA_BRPORT_GROUP_FWD_MASK: ::std::os::raw::c_uint = 31;
pub const IFLA_BRPORT_NEIGH_SUPPRESS: ::std::os::raw::c_uint = 32;
pub const IFLA_BRPORT_ISOLATED: ::std::os::raw::c_uint = 33;
pub const IFLA_BRPORT_BACKUP_PORT: ::std::os::raw::c_uint = 34;
pub const IFLA_BRPORT_MRP_RING_OPEN: ::std::os::raw::c_uint = 35;
pub const IFLA_BRPORT_MRP_IN_OPEN: ::std::os::raw::c_uint = 36;
pub const __IFLA_BRPORT_MAX: ::std::os::raw::c_uint = 37;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_cacheinfo {
    pub max_reasm_len: __u32,
    pub tstamp: __u32,
    pub reachable_time: __u32,
    pub retrans_time: __u32,
}
#[test]
fn bindgen_test_layout_ifla_cacheinfo() {
    assert_eq!(
        ::std::mem::size_of::<ifla_cacheinfo>(),
        16usize,
        concat!("Size of: ", stringify!(ifla_cacheinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_cacheinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_cacheinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_cacheinfo>())).max_reasm_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_cacheinfo),
            "::",
            stringify!(max_reasm_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_cacheinfo>())).tstamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_cacheinfo),
            "::",
            stringify!(tstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_cacheinfo>())).reachable_time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_cacheinfo),
            "::",
            stringify!(reachable_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_cacheinfo>())).retrans_time as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_cacheinfo),
            "::",
            stringify!(retrans_time)
        )
    );
}
pub const IFLA_INFO_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_INFO_KIND: ::std::os::raw::c_uint = 1;
pub const IFLA_INFO_DATA: ::std::os::raw::c_uint = 2;
pub const IFLA_INFO_XSTATS: ::std::os::raw::c_uint = 3;
pub const IFLA_INFO_SLAVE_KIND: ::std::os::raw::c_uint = 4;
pub const IFLA_INFO_SLAVE_DATA: ::std::os::raw::c_uint = 5;
pub const __IFLA_INFO_MAX: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const IFLA_VLAN_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VLAN_ID: ::std::os::raw::c_uint = 1;
pub const IFLA_VLAN_FLAGS: ::std::os::raw::c_uint = 2;
pub const IFLA_VLAN_EGRESS_QOS: ::std::os::raw::c_uint = 3;
pub const IFLA_VLAN_INGRESS_QOS: ::std::os::raw::c_uint = 4;
pub const IFLA_VLAN_PROTOCOL: ::std::os::raw::c_uint = 5;
pub const __IFLA_VLAN_MAX: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vlan_flags {
    pub flags: __u32,
    pub mask: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vlan_flags() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vlan_flags>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vlan_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vlan_flags>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vlan_flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vlan_flags>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vlan_flags),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vlan_flags>())).mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vlan_flags),
            "::",
            stringify!(mask)
        )
    );
}
pub const IFLA_VLAN_QOS_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VLAN_QOS_MAPPING: ::std::os::raw::c_uint = 1;
pub const __IFLA_VLAN_QOS_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vlan_qos_mapping {
    pub from: __u32,
    pub to: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vlan_qos_mapping() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vlan_qos_mapping>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vlan_qos_mapping))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vlan_qos_mapping>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vlan_qos_mapping))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vlan_qos_mapping>())).from as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vlan_qos_mapping),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vlan_qos_mapping>())).to as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vlan_qos_mapping),
            "::",
            stringify!(to)
        )
    );
}
pub const IFLA_MACVLAN_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_MACVLAN_MODE: ::std::os::raw::c_uint = 1;
pub const IFLA_MACVLAN_FLAGS: ::std::os::raw::c_uint = 2;
pub const IFLA_MACVLAN_MACADDR_MODE: ::std::os::raw::c_uint = 3;
pub const IFLA_MACVLAN_MACADDR: ::std::os::raw::c_uint = 4;
pub const IFLA_MACVLAN_MACADDR_DATA: ::std::os::raw::c_uint = 5;
pub const IFLA_MACVLAN_MACADDR_COUNT: ::std::os::raw::c_uint = 6;
pub const __IFLA_MACVLAN_MAX: ::std::os::raw::c_uint = 7;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
pub const macvlan_mode_MACVLAN_MODE_PRIVATE: macvlan_mode = 1;
pub const macvlan_mode_MACVLAN_MODE_VEPA: macvlan_mode = 2;
pub const macvlan_mode_MACVLAN_MODE_BRIDGE: macvlan_mode = 4;
pub const macvlan_mode_MACVLAN_MODE_PASSTHRU: macvlan_mode = 8;
pub const macvlan_mode_MACVLAN_MODE_SOURCE: macvlan_mode = 16;
pub type macvlan_mode = ::std::os::raw::c_uint;
pub const macvlan_macaddr_mode_MACVLAN_MACADDR_ADD: macvlan_macaddr_mode = 0;
pub const macvlan_macaddr_mode_MACVLAN_MACADDR_DEL: macvlan_macaddr_mode = 1;
pub const macvlan_macaddr_mode_MACVLAN_MACADDR_FLUSH: macvlan_macaddr_mode = 2;
pub const macvlan_macaddr_mode_MACVLAN_MACADDR_SET: macvlan_macaddr_mode = 3;
pub type macvlan_macaddr_mode = ::std::os::raw::c_uint;
pub const IFLA_VRF_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VRF_TABLE: ::std::os::raw::c_uint = 1;
pub const __IFLA_VRF_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub const IFLA_VRF_PORT_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VRF_PORT_TABLE: ::std::os::raw::c_uint = 1;
pub const __IFLA_VRF_PORT_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
pub const IFLA_MACSEC_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_MACSEC_SCI: ::std::os::raw::c_uint = 1;
pub const IFLA_MACSEC_PORT: ::std::os::raw::c_uint = 2;
pub const IFLA_MACSEC_ICV_LEN: ::std::os::raw::c_uint = 3;
pub const IFLA_MACSEC_CIPHER_SUITE: ::std::os::raw::c_uint = 4;
pub const IFLA_MACSEC_WINDOW: ::std::os::raw::c_uint = 5;
pub const IFLA_MACSEC_ENCODING_SA: ::std::os::raw::c_uint = 6;
pub const IFLA_MACSEC_ENCRYPT: ::std::os::raw::c_uint = 7;
pub const IFLA_MACSEC_PROTECT: ::std::os::raw::c_uint = 8;
pub const IFLA_MACSEC_INC_SCI: ::std::os::raw::c_uint = 9;
pub const IFLA_MACSEC_ES: ::std::os::raw::c_uint = 10;
pub const IFLA_MACSEC_SCB: ::std::os::raw::c_uint = 11;
pub const IFLA_MACSEC_REPLAY_PROTECT: ::std::os::raw::c_uint = 12;
pub const IFLA_MACSEC_VALIDATION: ::std::os::raw::c_uint = 13;
pub const IFLA_MACSEC_PAD: ::std::os::raw::c_uint = 14;
pub const IFLA_MACSEC_OFFLOAD: ::std::os::raw::c_uint = 15;
pub const __IFLA_MACSEC_MAX: ::std::os::raw::c_uint = 16;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const IFLA_XFRM_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_XFRM_LINK: ::std::os::raw::c_uint = 1;
pub const IFLA_XFRM_IF_ID: ::std::os::raw::c_uint = 2;
pub const __IFLA_XFRM_MAX: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub const macsec_validation_type_MACSEC_VALIDATE_DISABLED: macsec_validation_type = 0;
pub const macsec_validation_type_MACSEC_VALIDATE_CHECK: macsec_validation_type = 1;
pub const macsec_validation_type_MACSEC_VALIDATE_STRICT: macsec_validation_type = 2;
pub const macsec_validation_type___MACSEC_VALIDATE_END: macsec_validation_type = 3;
pub const macsec_validation_type_MACSEC_VALIDATE_MAX: macsec_validation_type = 2;
pub type macsec_validation_type = ::std::os::raw::c_uint;
pub const macsec_offload_MACSEC_OFFLOAD_OFF: macsec_offload = 0;
pub const macsec_offload_MACSEC_OFFLOAD_PHY: macsec_offload = 1;
pub const macsec_offload_MACSEC_OFFLOAD_MAC: macsec_offload = 2;
pub const macsec_offload___MACSEC_OFFLOAD_END: macsec_offload = 3;
pub const macsec_offload_MACSEC_OFFLOAD_MAX: macsec_offload = 2;
pub type macsec_offload = ::std::os::raw::c_uint;
pub const IFLA_IPVLAN_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_IPVLAN_MODE: ::std::os::raw::c_uint = 1;
pub const IFLA_IPVLAN_FLAGS: ::std::os::raw::c_uint = 2;
pub const __IFLA_IPVLAN_MAX: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub const ipvlan_mode_IPVLAN_MODE_L2: ipvlan_mode = 0;
pub const ipvlan_mode_IPVLAN_MODE_L3: ipvlan_mode = 1;
pub const ipvlan_mode_IPVLAN_MODE_L3S: ipvlan_mode = 2;
pub const ipvlan_mode_IPVLAN_MODE_MAX: ipvlan_mode = 3;
pub type ipvlan_mode = ::std::os::raw::c_uint;
pub const IFLA_VXLAN_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VXLAN_ID: ::std::os::raw::c_uint = 1;
pub const IFLA_VXLAN_GROUP: ::std::os::raw::c_uint = 2;
pub const IFLA_VXLAN_LINK: ::std::os::raw::c_uint = 3;
pub const IFLA_VXLAN_LOCAL: ::std::os::raw::c_uint = 4;
pub const IFLA_VXLAN_TTL: ::std::os::raw::c_uint = 5;
pub const IFLA_VXLAN_TOS: ::std::os::raw::c_uint = 6;
pub const IFLA_VXLAN_LEARNING: ::std::os::raw::c_uint = 7;
pub const IFLA_VXLAN_AGEING: ::std::os::raw::c_uint = 8;
pub const IFLA_VXLAN_LIMIT: ::std::os::raw::c_uint = 9;
pub const IFLA_VXLAN_PORT_RANGE: ::std::os::raw::c_uint = 10;
pub const IFLA_VXLAN_PROXY: ::std::os::raw::c_uint = 11;
pub const IFLA_VXLAN_RSC: ::std::os::raw::c_uint = 12;
pub const IFLA_VXLAN_L2MISS: ::std::os::raw::c_uint = 13;
pub const IFLA_VXLAN_L3MISS: ::std::os::raw::c_uint = 14;
pub const IFLA_VXLAN_PORT: ::std::os::raw::c_uint = 15;
pub const IFLA_VXLAN_GROUP6: ::std::os::raw::c_uint = 16;
pub const IFLA_VXLAN_LOCAL6: ::std::os::raw::c_uint = 17;
pub const IFLA_VXLAN_UDP_CSUM: ::std::os::raw::c_uint = 18;
pub const IFLA_VXLAN_UDP_ZERO_CSUM6_TX: ::std::os::raw::c_uint = 19;
pub const IFLA_VXLAN_UDP_ZERO_CSUM6_RX: ::std::os::raw::c_uint = 20;
pub const IFLA_VXLAN_REMCSUM_TX: ::std::os::raw::c_uint = 21;
pub const IFLA_VXLAN_REMCSUM_RX: ::std::os::raw::c_uint = 22;
pub const IFLA_VXLAN_GBP: ::std::os::raw::c_uint = 23;
pub const IFLA_VXLAN_REMCSUM_NOPARTIAL: ::std::os::raw::c_uint = 24;
pub const IFLA_VXLAN_COLLECT_METADATA: ::std::os::raw::c_uint = 25;
pub const IFLA_VXLAN_LABEL: ::std::os::raw::c_uint = 26;
pub const IFLA_VXLAN_GPE: ::std::os::raw::c_uint = 27;
pub const IFLA_VXLAN_TTL_INHERIT: ::std::os::raw::c_uint = 28;
pub const IFLA_VXLAN_DF: ::std::os::raw::c_uint = 29;
pub const __IFLA_VXLAN_MAX: ::std::os::raw::c_uint = 30;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vxlan_port_range {
    pub low: __be16,
    pub high: __be16,
}
#[test]
fn bindgen_test_layout_ifla_vxlan_port_range() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vxlan_port_range>(),
        4usize,
        concat!("Size of: ", stringify!(ifla_vxlan_port_range))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vxlan_port_range>(),
        2usize,
        concat!("Alignment of ", stringify!(ifla_vxlan_port_range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vxlan_port_range>())).low as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vxlan_port_range),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vxlan_port_range>())).high as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vxlan_port_range),
            "::",
            stringify!(high)
        )
    );
}
pub const ifla_vxlan_df_VXLAN_DF_UNSET: ifla_vxlan_df = 0;
pub const ifla_vxlan_df_VXLAN_DF_SET: ifla_vxlan_df = 1;
pub const ifla_vxlan_df_VXLAN_DF_INHERIT: ifla_vxlan_df = 2;
pub const ifla_vxlan_df___VXLAN_DF_END: ifla_vxlan_df = 3;
pub const ifla_vxlan_df_VXLAN_DF_MAX: ifla_vxlan_df = 2;
pub type ifla_vxlan_df = ::std::os::raw::c_uint;
pub const IFLA_GENEVE_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_GENEVE_ID: ::std::os::raw::c_uint = 1;
pub const IFLA_GENEVE_REMOTE: ::std::os::raw::c_uint = 2;
pub const IFLA_GENEVE_TTL: ::std::os::raw::c_uint = 3;
pub const IFLA_GENEVE_TOS: ::std::os::raw::c_uint = 4;
pub const IFLA_GENEVE_PORT: ::std::os::raw::c_uint = 5;
pub const IFLA_GENEVE_COLLECT_METADATA: ::std::os::raw::c_uint = 6;
pub const IFLA_GENEVE_REMOTE6: ::std::os::raw::c_uint = 7;
pub const IFLA_GENEVE_UDP_CSUM: ::std::os::raw::c_uint = 8;
pub const IFLA_GENEVE_UDP_ZERO_CSUM6_TX: ::std::os::raw::c_uint = 9;
pub const IFLA_GENEVE_UDP_ZERO_CSUM6_RX: ::std::os::raw::c_uint = 10;
pub const IFLA_GENEVE_LABEL: ::std::os::raw::c_uint = 11;
pub const IFLA_GENEVE_TTL_INHERIT: ::std::os::raw::c_uint = 12;
pub const IFLA_GENEVE_DF: ::std::os::raw::c_uint = 13;
pub const __IFLA_GENEVE_MAX: ::std::os::raw::c_uint = 14;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
pub const ifla_geneve_df_GENEVE_DF_UNSET: ifla_geneve_df = 0;
pub const ifla_geneve_df_GENEVE_DF_SET: ifla_geneve_df = 1;
pub const ifla_geneve_df_GENEVE_DF_INHERIT: ifla_geneve_df = 2;
pub const ifla_geneve_df___GENEVE_DF_END: ifla_geneve_df = 3;
pub const ifla_geneve_df_GENEVE_DF_MAX: ifla_geneve_df = 2;
pub type ifla_geneve_df = ::std::os::raw::c_uint;
pub const IFLA_BAREUDP_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_BAREUDP_PORT: ::std::os::raw::c_uint = 1;
pub const IFLA_BAREUDP_ETHERTYPE: ::std::os::raw::c_uint = 2;
pub const IFLA_BAREUDP_SRCPORT_MIN: ::std::os::raw::c_uint = 3;
pub const IFLA_BAREUDP_MULTIPROTO_MODE: ::std::os::raw::c_uint = 4;
pub const __IFLA_BAREUDP_MAX: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
pub const IFLA_PPP_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_PPP_DEV_FD: ::std::os::raw::c_uint = 1;
pub const __IFLA_PPP_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub const ifla_gtp_role_GTP_ROLE_GGSN: ifla_gtp_role = 0;
pub const ifla_gtp_role_GTP_ROLE_SGSN: ifla_gtp_role = 1;
pub type ifla_gtp_role = ::std::os::raw::c_uint;
pub const IFLA_GTP_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_GTP_FD0: ::std::os::raw::c_uint = 1;
pub const IFLA_GTP_FD1: ::std::os::raw::c_uint = 2;
pub const IFLA_GTP_PDP_HASHSIZE: ::std::os::raw::c_uint = 3;
pub const IFLA_GTP_ROLE: ::std::os::raw::c_uint = 4;
pub const __IFLA_GTP_MAX: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
pub const IFLA_BOND_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_BOND_MODE: ::std::os::raw::c_uint = 1;
pub const IFLA_BOND_ACTIVE_SLAVE: ::std::os::raw::c_uint = 2;
pub const IFLA_BOND_MIIMON: ::std::os::raw::c_uint = 3;
pub const IFLA_BOND_UPDELAY: ::std::os::raw::c_uint = 4;
pub const IFLA_BOND_DOWNDELAY: ::std::os::raw::c_uint = 5;
pub const IFLA_BOND_USE_CARRIER: ::std::os::raw::c_uint = 6;
pub const IFLA_BOND_ARP_INTERVAL: ::std::os::raw::c_uint = 7;
pub const IFLA_BOND_ARP_IP_TARGET: ::std::os::raw::c_uint = 8;
pub const IFLA_BOND_ARP_VALIDATE: ::std::os::raw::c_uint = 9;
pub const IFLA_BOND_ARP_ALL_TARGETS: ::std::os::raw::c_uint = 10;
pub const IFLA_BOND_PRIMARY: ::std::os::raw::c_uint = 11;
pub const IFLA_BOND_PRIMARY_RESELECT: ::std::os::raw::c_uint = 12;
pub const IFLA_BOND_FAIL_OVER_MAC: ::std::os::raw::c_uint = 13;
pub const IFLA_BOND_XMIT_HASH_POLICY: ::std::os::raw::c_uint = 14;
pub const IFLA_BOND_RESEND_IGMP: ::std::os::raw::c_uint = 15;
pub const IFLA_BOND_NUM_PEER_NOTIF: ::std::os::raw::c_uint = 16;
pub const IFLA_BOND_ALL_SLAVES_ACTIVE: ::std::os::raw::c_uint = 17;
pub const IFLA_BOND_MIN_LINKS: ::std::os::raw::c_uint = 18;
pub const IFLA_BOND_LP_INTERVAL: ::std::os::raw::c_uint = 19;
pub const IFLA_BOND_PACKETS_PER_SLAVE: ::std::os::raw::c_uint = 20;
pub const IFLA_BOND_AD_LACP_RATE: ::std::os::raw::c_uint = 21;
pub const IFLA_BOND_AD_SELECT: ::std::os::raw::c_uint = 22;
pub const IFLA_BOND_AD_INFO: ::std::os::raw::c_uint = 23;
pub const IFLA_BOND_AD_ACTOR_SYS_PRIO: ::std::os::raw::c_uint = 24;
pub const IFLA_BOND_AD_USER_PORT_KEY: ::std::os::raw::c_uint = 25;
pub const IFLA_BOND_AD_ACTOR_SYSTEM: ::std::os::raw::c_uint = 26;
pub const IFLA_BOND_TLB_DYNAMIC_LB: ::std::os::raw::c_uint = 27;
pub const IFLA_BOND_PEER_NOTIF_DELAY: ::std::os::raw::c_uint = 28;
pub const __IFLA_BOND_MAX: ::std::os::raw::c_uint = 29;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const IFLA_BOND_AD_INFO_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_BOND_AD_INFO_AGGREGATOR: ::std::os::raw::c_uint = 1;
pub const IFLA_BOND_AD_INFO_NUM_PORTS: ::std::os::raw::c_uint = 2;
pub const IFLA_BOND_AD_INFO_ACTOR_KEY: ::std::os::raw::c_uint = 3;
pub const IFLA_BOND_AD_INFO_PARTNER_KEY: ::std::os::raw::c_uint = 4;
pub const IFLA_BOND_AD_INFO_PARTNER_MAC: ::std::os::raw::c_uint = 5;
pub const __IFLA_BOND_AD_INFO_MAX: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
pub const IFLA_BOND_SLAVE_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_BOND_SLAVE_STATE: ::std::os::raw::c_uint = 1;
pub const IFLA_BOND_SLAVE_MII_STATUS: ::std::os::raw::c_uint = 2;
pub const IFLA_BOND_SLAVE_LINK_FAILURE_COUNT: ::std::os::raw::c_uint = 3;
pub const IFLA_BOND_SLAVE_PERM_HWADDR: ::std::os::raw::c_uint = 4;
pub const IFLA_BOND_SLAVE_QUEUE_ID: ::std::os::raw::c_uint = 5;
pub const IFLA_BOND_SLAVE_AD_AGGREGATOR_ID: ::std::os::raw::c_uint = 6;
pub const IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE: ::std::os::raw::c_uint = 7;
pub const IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE: ::std::os::raw::c_uint = 8;
pub const __IFLA_BOND_SLAVE_MAX: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
pub const IFLA_VF_INFO_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VF_INFO: ::std::os::raw::c_uint = 1;
pub const __IFLA_VF_INFO_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
pub const IFLA_VF_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VF_MAC: ::std::os::raw::c_uint = 1;
pub const IFLA_VF_VLAN: ::std::os::raw::c_uint = 2;
pub const IFLA_VF_TX_RATE: ::std::os::raw::c_uint = 3;
pub const IFLA_VF_SPOOFCHK: ::std::os::raw::c_uint = 4;
pub const IFLA_VF_LINK_STATE: ::std::os::raw::c_uint = 5;
pub const IFLA_VF_RATE: ::std::os::raw::c_uint = 6;
pub const IFLA_VF_RSS_QUERY_EN: ::std::os::raw::c_uint = 7;
pub const IFLA_VF_STATS: ::std::os::raw::c_uint = 8;
pub const IFLA_VF_TRUST: ::std::os::raw::c_uint = 9;
pub const IFLA_VF_IB_NODE_GUID: ::std::os::raw::c_uint = 10;
pub const IFLA_VF_IB_PORT_GUID: ::std::os::raw::c_uint = 11;
pub const IFLA_VF_VLAN_LIST: ::std::os::raw::c_uint = 12;
pub const IFLA_VF_BROADCAST: ::std::os::raw::c_uint = 13;
pub const __IFLA_VF_MAX: ::std::os::raw::c_uint = 14;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_mac {
    pub vf: __u32,
    pub mac: [__u8; 32usize],
}
#[test]
fn bindgen_test_layout_ifla_vf_mac() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_mac>(),
        36usize,
        concat!("Size of: ", stringify!(ifla_vf_mac))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_mac>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_mac))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_mac>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_mac),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_mac>())).mac as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_mac),
            "::",
            stringify!(mac)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_broadcast {
    pub broadcast: [__u8; 32usize],
}
#[test]
fn bindgen_test_layout_ifla_vf_broadcast() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_broadcast>(),
        32usize,
        concat!("Size of: ", stringify!(ifla_vf_broadcast))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_broadcast>(),
        1usize,
        concat!("Alignment of ", stringify!(ifla_vf_broadcast))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_broadcast>())).broadcast as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_broadcast),
            "::",
            stringify!(broadcast)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_vlan {
    pub vf: __u32,
    pub vlan: __u32,
    pub qos: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_vlan() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_vlan>(),
        12usize,
        concat!("Size of: ", stringify!(ifla_vf_vlan))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_vlan>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_vlan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan>())).vlan as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan),
            "::",
            stringify!(vlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan>())).qos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan),
            "::",
            stringify!(qos)
        )
    );
}
pub const IFLA_VF_VLAN_INFO_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VF_VLAN_INFO: ::std::os::raw::c_uint = 1;
pub const __IFLA_VF_VLAN_INFO_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_vlan_info {
    pub vf: __u32,
    pub vlan: __u32,
    pub qos: __u32,
    pub vlan_proto: __be16,
}
#[test]
fn bindgen_test_layout_ifla_vf_vlan_info() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_vlan_info>(),
        16usize,
        concat!("Size of: ", stringify!(ifla_vf_vlan_info))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_vlan_info>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_vlan_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan_info>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan_info),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan_info>())).vlan as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan_info),
            "::",
            stringify!(vlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan_info>())).qos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan_info),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan_info>())).vlan_proto as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan_info),
            "::",
            stringify!(vlan_proto)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_tx_rate {
    pub vf: __u32,
    pub rate: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_tx_rate() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_tx_rate>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_tx_rate))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_tx_rate>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_tx_rate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_tx_rate>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_tx_rate),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_tx_rate>())).rate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_tx_rate),
            "::",
            stringify!(rate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_rate {
    pub vf: __u32,
    pub min_tx_rate: __u32,
    pub max_tx_rate: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_rate() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_rate>(),
        12usize,
        concat!("Size of: ", stringify!(ifla_vf_rate))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_rate>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_rate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rate>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rate),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rate>())).min_tx_rate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rate),
            "::",
            stringify!(min_tx_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rate>())).max_tx_rate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rate),
            "::",
            stringify!(max_tx_rate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_spoofchk {
    pub vf: __u32,
    pub setting: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_spoofchk() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_spoofchk>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_spoofchk))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_spoofchk>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_spoofchk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_spoofchk>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_spoofchk),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_spoofchk>())).setting as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_spoofchk),
            "::",
            stringify!(setting)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_guid {
    pub vf: __u32,
    pub guid: __u64,
}
#[test]
fn bindgen_test_layout_ifla_vf_guid() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_guid>(),
        16usize,
        concat!("Size of: ", stringify!(ifla_vf_guid))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_guid>(),
        8usize,
        concat!("Alignment of ", stringify!(ifla_vf_guid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_guid>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_guid),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_guid>())).guid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_guid),
            "::",
            stringify!(guid)
        )
    );
}
pub const IFLA_VF_LINK_STATE_AUTO: ::std::os::raw::c_uint = 0;
pub const IFLA_VF_LINK_STATE_ENABLE: ::std::os::raw::c_uint = 1;
pub const IFLA_VF_LINK_STATE_DISABLE: ::std::os::raw::c_uint = 2;
pub const __IFLA_VF_LINK_STATE_MAX: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_link_state {
    pub vf: __u32,
    pub link_state: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_link_state() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_link_state>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_link_state))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_link_state>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_link_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_link_state>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_link_state),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_link_state>())).link_state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_link_state),
            "::",
            stringify!(link_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_rss_query_en {
    pub vf: __u32,
    pub setting: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_rss_query_en() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_rss_query_en>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_rss_query_en))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_rss_query_en>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_rss_query_en))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rss_query_en>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rss_query_en),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rss_query_en>())).setting as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rss_query_en),
            "::",
            stringify!(setting)
        )
    );
}
pub const IFLA_VF_STATS_RX_PACKETS: ::std::os::raw::c_uint = 0;
pub const IFLA_VF_STATS_TX_PACKETS: ::std::os::raw::c_uint = 1;
pub const IFLA_VF_STATS_RX_BYTES: ::std::os::raw::c_uint = 2;
pub const IFLA_VF_STATS_TX_BYTES: ::std::os::raw::c_uint = 3;
pub const IFLA_VF_STATS_BROADCAST: ::std::os::raw::c_uint = 4;
pub const IFLA_VF_STATS_MULTICAST: ::std::os::raw::c_uint = 5;
pub const IFLA_VF_STATS_PAD: ::std::os::raw::c_uint = 6;
pub const IFLA_VF_STATS_RX_DROPPED: ::std::os::raw::c_uint = 7;
pub const IFLA_VF_STATS_TX_DROPPED: ::std::os::raw::c_uint = 8;
pub const __IFLA_VF_STATS_MAX: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_trust {
    pub vf: __u32,
    pub setting: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_trust() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_trust>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_trust))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_trust>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_trust))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_trust>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_trust),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_trust>())).setting as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_trust),
            "::",
            stringify!(setting)
        )
    );
}
pub const IFLA_VF_PORT_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VF_PORT: ::std::os::raw::c_uint = 1;
pub const __IFLA_VF_PORT_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
pub const IFLA_PORT_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_PORT_VF: ::std::os::raw::c_uint = 1;
pub const IFLA_PORT_PROFILE: ::std::os::raw::c_uint = 2;
pub const IFLA_PORT_VSI_TYPE: ::std::os::raw::c_uint = 3;
pub const IFLA_PORT_INSTANCE_UUID: ::std::os::raw::c_uint = 4;
pub const IFLA_PORT_HOST_UUID: ::std::os::raw::c_uint = 5;
pub const IFLA_PORT_REQUEST: ::std::os::raw::c_uint = 6;
pub const IFLA_PORT_RESPONSE: ::std::os::raw::c_uint = 7;
pub const __IFLA_PORT_MAX: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_32 = ::std::os::raw::c_uint;
pub const PORT_REQUEST_PREASSOCIATE: ::std::os::raw::c_uint = 0;
pub const PORT_REQUEST_PREASSOCIATE_RR: ::std::os::raw::c_uint = 1;
pub const PORT_REQUEST_ASSOCIATE: ::std::os::raw::c_uint = 2;
pub const PORT_REQUEST_DISASSOCIATE: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
pub const PORT_VDP_RESPONSE_SUCCESS: ::std::os::raw::c_uint = 0;
pub const PORT_VDP_RESPONSE_INVALID_FORMAT: ::std::os::raw::c_uint = 1;
pub const PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES: ::std::os::raw::c_uint = 2;
pub const PORT_VDP_RESPONSE_UNUSED_VTID: ::std::os::raw::c_uint = 3;
pub const PORT_VDP_RESPONSE_VTID_VIOLATION: ::std::os::raw::c_uint = 4;
pub const PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION: ::std::os::raw::c_uint = 5;
pub const PORT_VDP_RESPONSE_OUT_OF_SYNC: ::std::os::raw::c_uint = 6;
pub const PORT_PROFILE_RESPONSE_SUCCESS: ::std::os::raw::c_uint = 256;
pub const PORT_PROFILE_RESPONSE_INPROGRESS: ::std::os::raw::c_uint = 257;
pub const PORT_PROFILE_RESPONSE_INVALID: ::std::os::raw::c_uint = 258;
pub const PORT_PROFILE_RESPONSE_BADSTATE: ::std::os::raw::c_uint = 259;
pub const PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES: ::std::os::raw::c_uint = 260;
pub const PORT_PROFILE_RESPONSE_ERROR: ::std::os::raw::c_uint = 261;
pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_port_vsi {
    pub vsi_mgr_id: __u8,
    pub vsi_type_id: [__u8; 3usize],
    pub vsi_type_version: __u8,
    pub pad: [__u8; 3usize],
}
#[test]
fn bindgen_test_layout_ifla_port_vsi() {
    assert_eq!(
        ::std::mem::size_of::<ifla_port_vsi>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_port_vsi))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_port_vsi>(),
        1usize,
        concat!("Alignment of ", stringify!(ifla_port_vsi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_port_vsi>())).vsi_mgr_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_port_vsi),
            "::",
            stringify!(vsi_mgr_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_port_vsi>())).vsi_type_id as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_port_vsi),
            "::",
            stringify!(vsi_type_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_port_vsi>())).vsi_type_version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_port_vsi),
            "::",
            stringify!(vsi_type_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_port_vsi>())).pad as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_port_vsi),
            "::",
            stringify!(pad)
        )
    );
}
pub const IFLA_IPOIB_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_IPOIB_PKEY: ::std::os::raw::c_uint = 1;
pub const IFLA_IPOIB_MODE: ::std::os::raw::c_uint = 2;
pub const IFLA_IPOIB_UMCAST: ::std::os::raw::c_uint = 3;
pub const __IFLA_IPOIB_MAX: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
pub const IPOIB_MODE_DATAGRAM: ::std::os::raw::c_uint = 0;
pub const IPOIB_MODE_CONNECTED: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
pub const HSR_PROTOCOL_HSR: ::std::os::raw::c_uint = 0;
pub const HSR_PROTOCOL_PRP: ::std::os::raw::c_uint = 1;
pub const HSR_PROTOCOL_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
pub const IFLA_HSR_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_HSR_SLAVE1: ::std::os::raw::c_uint = 1;
pub const IFLA_HSR_SLAVE2: ::std::os::raw::c_uint = 2;
pub const IFLA_HSR_MULTICAST_SPEC: ::std::os::raw::c_uint = 3;
pub const IFLA_HSR_SUPERVISION_ADDR: ::std::os::raw::c_uint = 4;
pub const IFLA_HSR_SEQ_NR: ::std::os::raw::c_uint = 5;
pub const IFLA_HSR_VERSION: ::std::os::raw::c_uint = 6;
pub const IFLA_HSR_PROTOCOL: ::std::os::raw::c_uint = 7;
pub const __IFLA_HSR_MAX: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_stats_msg {
    pub family: __u8,
    pub pad1: __u8,
    pub pad2: __u16,
    pub ifindex: __u32,
    pub filter_mask: __u32,
}
#[test]
fn bindgen_test_layout_if_stats_msg() {
    assert_eq!(
        ::std::mem::size_of::<if_stats_msg>(),
        12usize,
        concat!("Size of: ", stringify!(if_stats_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<if_stats_msg>(),
        4usize,
        concat!("Alignment of ", stringify!(if_stats_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).ifindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).filter_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(filter_mask)
        )
    );
}
pub const IFLA_STATS_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_STATS_LINK_64: ::std::os::raw::c_uint = 1;
pub const IFLA_STATS_LINK_XSTATS: ::std::os::raw::c_uint = 2;
pub const IFLA_STATS_LINK_XSTATS_SLAVE: ::std::os::raw::c_uint = 3;
pub const IFLA_STATS_LINK_OFFLOAD_XSTATS: ::std::os::raw::c_uint = 4;
pub const IFLA_STATS_AF_SPEC: ::std::os::raw::c_uint = 5;
pub const __IFLA_STATS_MAX: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
pub const LINK_XSTATS_TYPE_UNSPEC: ::std::os::raw::c_uint = 0;
pub const LINK_XSTATS_TYPE_BRIDGE: ::std::os::raw::c_uint = 1;
pub const LINK_XSTATS_TYPE_BOND: ::std::os::raw::c_uint = 2;
pub const __LINK_XSTATS_TYPE_MAX: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
pub const IFLA_OFFLOAD_XSTATS_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_OFFLOAD_XSTATS_CPU_HIT: ::std::os::raw::c_uint = 1;
pub const __IFLA_OFFLOAD_XSTATS_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
pub const XDP_ATTACHED_NONE: ::std::os::raw::c_uint = 0;
pub const XDP_ATTACHED_DRV: ::std::os::raw::c_uint = 1;
pub const XDP_ATTACHED_SKB: ::std::os::raw::c_uint = 2;
pub const XDP_ATTACHED_HW: ::std::os::raw::c_uint = 3;
pub const XDP_ATTACHED_MULTI: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_42 = ::std::os::raw::c_uint;
pub const IFLA_XDP_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_XDP_FD: ::std::os::raw::c_uint = 1;
pub const IFLA_XDP_ATTACHED: ::std::os::raw::c_uint = 2;
pub const IFLA_XDP_FLAGS: ::std::os::raw::c_uint = 3;
pub const IFLA_XDP_PROG_ID: ::std::os::raw::c_uint = 4;
pub const IFLA_XDP_DRV_PROG_ID: ::std::os::raw::c_uint = 5;
pub const IFLA_XDP_SKB_PROG_ID: ::std::os::raw::c_uint = 6;
pub const IFLA_XDP_HW_PROG_ID: ::std::os::raw::c_uint = 7;
pub const IFLA_XDP_EXPECTED_FD: ::std::os::raw::c_uint = 8;
pub const __IFLA_XDP_MAX: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
pub const IFLA_EVENT_NONE: ::std::os::raw::c_uint = 0;
pub const IFLA_EVENT_REBOOT: ::std::os::raw::c_uint = 1;
pub const IFLA_EVENT_FEATURES: ::std::os::raw::c_uint = 2;
pub const IFLA_EVENT_BONDING_FAILOVER: ::std::os::raw::c_uint = 3;
pub const IFLA_EVENT_NOTIFY_PEERS: ::std::os::raw::c_uint = 4;
pub const IFLA_EVENT_IGMP_RESEND: ::std::os::raw::c_uint = 5;
pub const IFLA_EVENT_BONDING_OPTIONS: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
pub const IFLA_TUN_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_TUN_OWNER: ::std::os::raw::c_uint = 1;
pub const IFLA_TUN_GROUP: ::std::os::raw::c_uint = 2;
pub const IFLA_TUN_TYPE: ::std::os::raw::c_uint = 3;
pub const IFLA_TUN_PI: ::std::os::raw::c_uint = 4;
pub const IFLA_TUN_VNET_HDR: ::std::os::raw::c_uint = 5;
pub const IFLA_TUN_PERSIST: ::std::os::raw::c_uint = 6;
pub const IFLA_TUN_MULTI_QUEUE: ::std::os::raw::c_uint = 7;
pub const IFLA_TUN_NUM_QUEUES: ::std::os::raw::c_uint = 8;
pub const IFLA_TUN_NUM_DISABLED_QUEUES: ::std::os::raw::c_uint = 9;
pub const __IFLA_TUN_MAX: ::std::os::raw::c_uint = 10;
pub type _bindgen_ty_45 = ::std::os::raw::c_uint;
pub const IFLA_RMNET_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_RMNET_MUX_ID: ::std::os::raw::c_uint = 1;
pub const IFLA_RMNET_FLAGS: ::std::os::raw::c_uint = 2;
pub const __IFLA_RMNET_MAX: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_46 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_rmnet_flags {
    pub flags: __u32,
    pub mask: __u32,
}
#[test]
fn bindgen_test_layout_ifla_rmnet_flags() {
    assert_eq!(
        ::std::mem::size_of::<ifla_rmnet_flags>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_rmnet_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_rmnet_flags>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_rmnet_flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_rmnet_flags>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_rmnet_flags),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_rmnet_flags>())).mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_rmnet_flags),
            "::",
            stringify!(mask)
        )
    );
}

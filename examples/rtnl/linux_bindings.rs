#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(dead_code)]

/* automatically generated by rust-bindgen 0.59.1 */
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __UAPI_DEF_IF_IFCONF: u32 = 1;
pub const __UAPI_DEF_IF_IFMAP: u32 = 1;
pub const __UAPI_DEF_IF_IFNAMSIZ: u32 = 1;
pub const __UAPI_DEF_IF_IFREQ: u32 = 1;
pub const __UAPI_DEF_IF_NET_DEVICE_FLAGS: u32 = 1;
pub const __UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO: u32 = 1;
pub const __UAPI_DEF_IN_ADDR: u32 = 1;
pub const __UAPI_DEF_IN_IPPROTO: u32 = 1;
pub const __UAPI_DEF_IN_PKTINFO: u32 = 1;
pub const __UAPI_DEF_IP_MREQ: u32 = 1;
pub const __UAPI_DEF_SOCKADDR_IN: u32 = 1;
pub const __UAPI_DEF_IN_CLASS: u32 = 1;
pub const __UAPI_DEF_IN6_ADDR: u32 = 1;
pub const __UAPI_DEF_IN6_ADDR_ALT: u32 = 1;
pub const __UAPI_DEF_SOCKADDR_IN6: u32 = 1;
pub const __UAPI_DEF_IPV6_MREQ: u32 = 1;
pub const __UAPI_DEF_IPPROTO_V6: u32 = 1;
pub const __UAPI_DEF_IPV6_OPTIONS: u32 = 1;
pub const __UAPI_DEF_IN6_PKTINFO: u32 = 1;
pub const __UAPI_DEF_IP6_MTUINFO: u32 = 1;
pub const __UAPI_DEF_SOCKADDR_IPX: u32 = 1;
pub const __UAPI_DEF_IPX_ROUTE_DEFINITION: u32 = 1;
pub const __UAPI_DEF_IPX_INTERFACE_DEFINITION: u32 = 1;
pub const __UAPI_DEF_IPX_CONFIG_DATA: u32 = 1;
pub const __UAPI_DEF_IPX_ROUTE_DEF: u32 = 1;
pub const __UAPI_DEF_XATTR: u32 = 1;
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const _K_SS_MAXSIZE: u32 = 128;
pub const _SYS_SOCKET_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 28;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_MAX: u32 = 44;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_MAX: u32 = 44;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOMAXCONN: u32 = 128;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP: u32 = 35078;
pub const SIOCGSTAMPNS: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SO_MARK: u32 = 36;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const __osockaddr_defined: u32 = 1;
pub const IFNAMSIZ: u32 = 16;
pub const IFALIASZ: u32 = 256;
pub const GENERIC_HDLC_VERSION: u32 = 4;
pub const CLOCK_DEFAULT: u32 = 0;
pub const CLOCK_EXT: u32 = 1;
pub const CLOCK_INT: u32 = 2;
pub const CLOCK_TXINT: u32 = 3;
pub const CLOCK_TXFROMRX: u32 = 4;
pub const ENCODING_DEFAULT: u32 = 0;
pub const ENCODING_NRZ: u32 = 1;
pub const ENCODING_NRZI: u32 = 2;
pub const ENCODING_FM_MARK: u32 = 3;
pub const ENCODING_FM_SPACE: u32 = 4;
pub const ENCODING_MANCHESTER: u32 = 5;
pub const PARITY_DEFAULT: u32 = 0;
pub const PARITY_NONE: u32 = 1;
pub const PARITY_CRC16_PR0: u32 = 2;
pub const PARITY_CRC16_PR1: u32 = 3;
pub const PARITY_CRC16_PR0_CCITT: u32 = 4;
pub const PARITY_CRC16_PR1_CCITT: u32 = 5;
pub const PARITY_CRC32_PR0_CCITT: u32 = 6;
pub const PARITY_CRC32_PR1_CCITT: u32 = 7;
pub const LMI_DEFAULT: u32 = 0;
pub const LMI_NONE: u32 = 1;
pub const LMI_ANSI: u32 = 2;
pub const LMI_CCITT: u32 = 3;
pub const LMI_CISCO: u32 = 4;
pub const IF_GET_IFACE: u32 = 1;
pub const IF_GET_PROTO: u32 = 2;
pub const IF_IFACE_V35: u32 = 4096;
pub const IF_IFACE_V24: u32 = 4097;
pub const IF_IFACE_X21: u32 = 4098;
pub const IF_IFACE_T1: u32 = 4099;
pub const IF_IFACE_E1: u32 = 4100;
pub const IF_IFACE_SYNC_SERIAL: u32 = 4101;
pub const IF_IFACE_X21D: u32 = 4102;
pub const IF_PROTO_HDLC: u32 = 8192;
pub const IF_PROTO_PPP: u32 = 8193;
pub const IF_PROTO_CISCO: u32 = 8194;
pub const IF_PROTO_FR: u32 = 8195;
pub const IF_PROTO_FR_ADD_PVC: u32 = 8196;
pub const IF_PROTO_FR_DEL_PVC: u32 = 8197;
pub const IF_PROTO_X25: u32 = 8198;
pub const IF_PROTO_HDLC_ETH: u32 = 8199;
pub const IF_PROTO_FR_ADD_ETH_PVC: u32 = 8200;
pub const IF_PROTO_FR_DEL_ETH_PVC: u32 = 8201;
pub const IF_PROTO_FR_PVC: u32 = 8202;
pub const IF_PROTO_FR_ETH_PVC: u32 = 8203;
pub const IF_PROTO_RAW: u32 = 8204;
pub const IFHWADDRLEN: u32 = 6;
pub const NETLINK_ROUTE: u32 = 0;
pub const NETLINK_UNUSED: u32 = 1;
pub const NETLINK_USERSOCK: u32 = 2;
pub const NETLINK_FIREWALL: u32 = 3;
pub const NETLINK_SOCK_DIAG: u32 = 4;
pub const NETLINK_NFLOG: u32 = 5;
pub const NETLINK_XFRM: u32 = 6;
pub const NETLINK_SELINUX: u32 = 7;
pub const NETLINK_ISCSI: u32 = 8;
pub const NETLINK_AUDIT: u32 = 9;
pub const NETLINK_FIB_LOOKUP: u32 = 10;
pub const NETLINK_CONNECTOR: u32 = 11;
pub const NETLINK_NETFILTER: u32 = 12;
pub const NETLINK_IP6_FW: u32 = 13;
pub const NETLINK_DNRTMSG: u32 = 14;
pub const NETLINK_KOBJECT_UEVENT: u32 = 15;
pub const NETLINK_GENERIC: u32 = 16;
pub const NETLINK_SCSITRANSPORT: u32 = 18;
pub const NETLINK_ECRYPTFS: u32 = 19;
pub const NETLINK_RDMA: u32 = 20;
pub const NETLINK_CRYPTO: u32 = 21;
pub const NETLINK_SMC: u32 = 22;
pub const NETLINK_INET_DIAG: u32 = 4;
pub const MAX_LINKS: u32 = 32;
pub const NLM_F_REQUEST: u32 = 1;
pub const NLM_F_MULTI: u32 = 2;
pub const NLM_F_ACK: u32 = 4;
pub const NLM_F_ECHO: u32 = 8;
pub const NLM_F_DUMP_INTR: u32 = 16;
pub const NLM_F_DUMP_FILTERED: u32 = 32;
pub const NLM_F_ROOT: u32 = 256;
pub const NLM_F_MATCH: u32 = 512;
pub const NLM_F_ATOMIC: u32 = 1024;
pub const NLM_F_DUMP: u32 = 768;
pub const NLM_F_REPLACE: u32 = 256;
pub const NLM_F_EXCL: u32 = 512;
pub const NLM_F_CREATE: u32 = 1024;
pub const NLM_F_APPEND: u32 = 2048;
pub const NLM_F_NONREC: u32 = 256;
pub const NLM_F_CAPPED: u32 = 256;
pub const NLM_F_ACK_TLVS: u32 = 512;
pub const NLMSG_ALIGNTO: u32 = 4;
pub const NLMSG_NOOP: u32 = 1;
pub const NLMSG_ERROR: u32 = 2;
pub const NLMSG_DONE: u32 = 3;
pub const NLMSG_OVERRUN: u32 = 4;
pub const NLMSG_MIN_TYPE: u32 = 16;
pub const NETLINK_ADD_MEMBERSHIP: u32 = 1;
pub const NETLINK_DROP_MEMBERSHIP: u32 = 2;
pub const NETLINK_PKTINFO: u32 = 3;
pub const NETLINK_BROADCAST_ERROR: u32 = 4;
pub const NETLINK_NO_ENOBUFS: u32 = 5;
pub const NETLINK_RX_RING: u32 = 6;
pub const NETLINK_TX_RING: u32 = 7;
pub const NETLINK_LISTEN_ALL_NSID: u32 = 8;
pub const NETLINK_LIST_MEMBERSHIPS: u32 = 9;
pub const NETLINK_CAP_ACK: u32 = 10;
pub const NETLINK_EXT_ACK: u32 = 11;
pub const NL_MMAP_MSG_ALIGNMENT: u32 = 4;
pub const NET_MAJOR: u32 = 36;
pub const NLA_F_NESTED: u32 = 32768;
pub const NLA_F_NET_BYTEORDER: u32 = 16384;
pub const NLA_TYPE_MASK: i32 = -49153;
pub const NLA_ALIGNTO: u32 = 4;
pub const MACVLAN_FLAG_NOPROMISC: u32 = 1;
pub const IPVLAN_F_PRIVATE: u32 = 1;
pub const IPVLAN_F_VEPA: u32 = 2;
pub const MAX_VLAN_LIST_LEN: u32 = 1;
pub const PORT_PROFILE_MAX: u32 = 40;
pub const PORT_UUID_MAX: u32 = 16;
pub const PORT_SELF_VF: i32 = -1;
pub const XDP_FLAGS_UPDATE_IF_NOEXIST: u32 = 1;
pub const XDP_FLAGS_SKB_MODE: u32 = 2;
pub const XDP_FLAGS_DRV_MODE: u32 = 4;
pub const XDP_FLAGS_HW_MODE: u32 = 8;
pub const XDP_FLAGS_MODES: u32 = 14;
pub const XDP_FLAGS_MASK: u32 = 15;
pub const RMNET_FLAGS_INGRESS_DEAGGREGATION: u32 = 1;
pub const RMNET_FLAGS_INGRESS_MAP_COMMANDS: u32 = 2;
pub const RMNET_FLAGS_INGRESS_MAP_CKSUMV4: u32 = 4;
pub const RMNET_FLAGS_EGRESS_MAP_CKSUMV4: u32 = 8;
pub const IFA_F_SECONDARY: u32 = 1;
pub const IFA_F_TEMPORARY: u32 = 1;
pub const IFA_F_NODAD: u32 = 2;
pub const IFA_F_OPTIMISTIC: u32 = 4;
pub const IFA_F_DADFAILED: u32 = 8;
pub const IFA_F_HOMEADDRESS: u32 = 16;
pub const IFA_F_DEPRECATED: u32 = 32;
pub const IFA_F_TENTATIVE: u32 = 64;
pub const IFA_F_PERMANENT: u32 = 128;
pub const IFA_F_MANAGETEMPADDR: u32 = 256;
pub const IFA_F_NOPREFIXROUTE: u32 = 512;
pub const IFA_F_MCAUTOJOIN: u32 = 1024;
pub const IFA_F_STABLE_PRIVACY: u32 = 2048;
pub const NTF_USE: u32 = 1;
pub const NTF_SELF: u32 = 2;
pub const NTF_MASTER: u32 = 4;
pub const NTF_PROXY: u32 = 8;
pub const NTF_EXT_LEARNED: u32 = 16;
pub const NTF_OFFLOADED: u32 = 32;
pub const NTF_ROUTER: u32 = 128;
pub const NUD_INCOMPLETE: u32 = 1;
pub const NUD_REACHABLE: u32 = 2;
pub const NUD_STALE: u32 = 4;
pub const NUD_DELAY: u32 = 8;
pub const NUD_PROBE: u32 = 16;
pub const NUD_FAILED: u32 = 32;
pub const NUD_NOARP: u32 = 64;
pub const NUD_PERMANENT: u32 = 128;
pub const NUD_NONE: u32 = 0;
pub const RTNL_FAMILY_IPMR: u32 = 128;
pub const RTNL_FAMILY_IP6MR: u32 = 129;
pub const RTNL_FAMILY_MAX: u32 = 129;
pub const RTA_ALIGNTO: u32 = 4;
pub const RTPROT_UNSPEC: u32 = 0;
pub const RTPROT_REDIRECT: u32 = 1;
pub const RTPROT_KERNEL: u32 = 2;
pub const RTPROT_BOOT: u32 = 3;
pub const RTPROT_STATIC: u32 = 4;
pub const RTPROT_GATED: u32 = 8;
pub const RTPROT_RA: u32 = 9;
pub const RTPROT_MRT: u32 = 10;
pub const RTPROT_ZEBRA: u32 = 11;
pub const RTPROT_BIRD: u32 = 12;
pub const RTPROT_DNROUTED: u32 = 13;
pub const RTPROT_XORP: u32 = 14;
pub const RTPROT_NTK: u32 = 15;
pub const RTPROT_DHCP: u32 = 16;
pub const RTPROT_MROUTED: u32 = 17;
pub const RTPROT_BABEL: u32 = 42;
pub const RTPROT_BGP: u32 = 186;
pub const RTPROT_ISIS: u32 = 187;
pub const RTPROT_OSPF: u32 = 188;
pub const RTPROT_RIP: u32 = 189;
pub const RTPROT_EIGRP: u32 = 192;
pub const RTM_F_NOTIFY: u32 = 256;
pub const RTM_F_CLONED: u32 = 512;
pub const RTM_F_EQUALIZE: u32 = 1024;
pub const RTM_F_PREFIX: u32 = 2048;
pub const RTM_F_LOOKUP_TABLE: u32 = 4096;
pub const RTM_F_FIB_MATCH: u32 = 8192;
pub const RTNH_F_DEAD: u32 = 1;
pub const RTNH_F_PERVASIVE: u32 = 2;
pub const RTNH_F_ONLINK: u32 = 4;
pub const RTNH_F_OFFLOAD: u32 = 8;
pub const RTNH_F_LINKDOWN: u32 = 16;
pub const RTNH_F_UNRESOLVED: u32 = 32;
pub const RTNH_COMPARE_MASK: u32 = 25;
pub const RTNH_ALIGNTO: u32 = 4;
pub const RTNETLINK_HAVE_PEERINFO: u32 = 1;
pub const RTAX_FEATURE_ECN: u32 = 1;
pub const RTAX_FEATURE_SACK: u32 = 2;
pub const RTAX_FEATURE_TIMESTAMP: u32 = 4;
pub const RTAX_FEATURE_ALLFRAG: u32 = 8;
pub const RTAX_FEATURE_MASK: u32 = 15;
pub const TCM_IFINDEX_MAGIC_BLOCK: u32 = 4294967295;
pub const RTMGRP_LINK: u32 = 1;
pub const RTMGRP_NOTIFY: u32 = 2;
pub const RTMGRP_NEIGH: u32 = 4;
pub const RTMGRP_TC: u32 = 8;
pub const RTMGRP_IPV4_IFADDR: u32 = 16;
pub const RTMGRP_IPV4_MROUTE: u32 = 32;
pub const RTMGRP_IPV4_ROUTE: u32 = 64;
pub const RTMGRP_IPV4_RULE: u32 = 128;
pub const RTMGRP_IPV6_IFADDR: u32 = 256;
pub const RTMGRP_IPV6_MROUTE: u32 = 512;
pub const RTMGRP_IPV6_ROUTE: u32 = 1024;
pub const RTMGRP_IPV6_IFINFO: u32 = 2048;
pub const RTMGRP_DECnet_IFADDR: u32 = 4096;
pub const RTMGRP_DECnet_ROUTE: u32 = 16384;
pub const RTMGRP_IPV6_PREFIX: u32 = 131072;
pub const TCA_FLAG_LARGE_DUMP_ON: u32 = 1;
pub const RTEXT_FILTER_VF: u32 = 1;
pub const RTEXT_FILTER_BRVLAN: u32 = 2;
pub const RTEXT_FILTER_BRVLAN_COMPRESSED: u32 = 4;
pub const RTEXT_FILTER_SKIP_STATS: u32 = 8;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub type __kernel_sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_sockaddr_storage {
    pub ss_family: __kernel_sa_family_t,
    pub __data: [::std::os::raw::c_char; 126usize],
}
#[test]
fn bindgen_test_layout___kernel_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_sockaddr_storage))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_sockaddr_storage>())).ss_family as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__kernel_sockaddr_storage>())).__data as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_sockaddr_storage),
            "::",
            stringify!(__data)
        )
    );
}
pub type size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: size_t,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: ::std::os::raw::c_uint = 1;
pub const MSG_PEEK: ::std::os::raw::c_uint = 2;
pub const MSG_DONTROUTE: ::std::os::raw::c_uint = 4;
pub const MSG_CTRUNC: ::std::os::raw::c_uint = 8;
pub const MSG_PROXY: ::std::os::raw::c_uint = 16;
pub const MSG_TRUNC: ::std::os::raw::c_uint = 32;
pub const MSG_DONTWAIT: ::std::os::raw::c_uint = 64;
pub const MSG_EOR: ::std::os::raw::c_uint = 128;
pub const MSG_WAITALL: ::std::os::raw::c_uint = 256;
pub const MSG_FIN: ::std::os::raw::c_uint = 512;
pub const MSG_SYN: ::std::os::raw::c_uint = 1024;
pub const MSG_CONFIRM: ::std::os::raw::c_uint = 2048;
pub const MSG_RST: ::std::os::raw::c_uint = 4096;
pub const MSG_ERRQUEUE: ::std::os::raw::c_uint = 8192;
pub const MSG_NOSIGNAL: ::std::os::raw::c_uint = 16384;
pub const MSG_MORE: ::std::os::raw::c_uint = 32768;
pub const MSG_WAITFORONE: ::std::os::raw::c_uint = 65536;
pub const MSG_BATCH: ::std::os::raw::c_uint = 262144;
pub const MSG_ZEROCOPY: ::std::os::raw::c_uint = 67108864;
pub const MSG_FASTOPEN: ::std::os::raw::c_uint = 536870912;
pub const MSG_CMSG_CLOEXEC: ::std::os::raw::c_uint = 1073741824;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: size_t,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: size_t,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: size_t,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: ::std::os::raw::c_uint = 0;
pub const SHUT_WR: ::std::os::raw::c_uint = 1;
pub const SHUT_RDWR: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: size_t,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ssize_t;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> ssize_t;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sync_serial_settings {
    pub clock_rate: ::std::os::raw::c_uint,
    pub clock_type: ::std::os::raw::c_uint,
    pub loopback: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_sync_serial_settings() {
    assert_eq!(
        ::std::mem::size_of::<sync_serial_settings>(),
        12usize,
        concat!("Size of: ", stringify!(sync_serial_settings))
    );
    assert_eq!(
        ::std::mem::align_of::<sync_serial_settings>(),
        4usize,
        concat!("Alignment of ", stringify!(sync_serial_settings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sync_serial_settings>())).clock_rate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sync_serial_settings),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sync_serial_settings>())).clock_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sync_serial_settings),
            "::",
            stringify!(clock_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sync_serial_settings>())).loopback as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sync_serial_settings),
            "::",
            stringify!(loopback)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct te1_settings {
    pub clock_rate: ::std::os::raw::c_uint,
    pub clock_type: ::std::os::raw::c_uint,
    pub loopback: ::std::os::raw::c_ushort,
    pub slot_map: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_te1_settings() {
    assert_eq!(
        ::std::mem::size_of::<te1_settings>(),
        16usize,
        concat!("Size of: ", stringify!(te1_settings))
    );
    assert_eq!(
        ::std::mem::align_of::<te1_settings>(),
        4usize,
        concat!("Alignment of ", stringify!(te1_settings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<te1_settings>())).clock_rate as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(te1_settings),
            "::",
            stringify!(clock_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<te1_settings>())).clock_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(te1_settings),
            "::",
            stringify!(clock_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<te1_settings>())).loopback as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(te1_settings),
            "::",
            stringify!(loopback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<te1_settings>())).slot_map as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(te1_settings),
            "::",
            stringify!(slot_map)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct raw_hdlc_proto {
    pub encoding: ::std::os::raw::c_ushort,
    pub parity: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_raw_hdlc_proto() {
    assert_eq!(
        ::std::mem::size_of::<raw_hdlc_proto>(),
        4usize,
        concat!("Size of: ", stringify!(raw_hdlc_proto))
    );
    assert_eq!(
        ::std::mem::align_of::<raw_hdlc_proto>(),
        2usize,
        concat!("Alignment of ", stringify!(raw_hdlc_proto))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<raw_hdlc_proto>())).encoding as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(raw_hdlc_proto),
            "::",
            stringify!(encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<raw_hdlc_proto>())).parity as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(raw_hdlc_proto),
            "::",
            stringify!(parity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fr_proto {
    pub t391: ::std::os::raw::c_uint,
    pub t392: ::std::os::raw::c_uint,
    pub n391: ::std::os::raw::c_uint,
    pub n392: ::std::os::raw::c_uint,
    pub n393: ::std::os::raw::c_uint,
    pub lmi: ::std::os::raw::c_ushort,
    pub dce: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_fr_proto() {
    assert_eq!(
        ::std::mem::size_of::<fr_proto>(),
        24usize,
        concat!("Size of: ", stringify!(fr_proto))
    );
    assert_eq!(
        ::std::mem::align_of::<fr_proto>(),
        4usize,
        concat!("Alignment of ", stringify!(fr_proto))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto>())).t391 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto),
            "::",
            stringify!(t391)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto>())).t392 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto),
            "::",
            stringify!(t392)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto>())).n391 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto),
            "::",
            stringify!(n391)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto>())).n392 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto),
            "::",
            stringify!(n392)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto>())).n393 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto),
            "::",
            stringify!(n393)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto>())).lmi as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto),
            "::",
            stringify!(lmi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto>())).dce as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto),
            "::",
            stringify!(dce)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fr_proto_pvc {
    pub dlci: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_fr_proto_pvc() {
    assert_eq!(
        ::std::mem::size_of::<fr_proto_pvc>(),
        4usize,
        concat!("Size of: ", stringify!(fr_proto_pvc))
    );
    assert_eq!(
        ::std::mem::align_of::<fr_proto_pvc>(),
        4usize,
        concat!("Alignment of ", stringify!(fr_proto_pvc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto_pvc>())).dlci as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto_pvc),
            "::",
            stringify!(dlci)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fr_proto_pvc_info {
    pub dlci: ::std::os::raw::c_uint,
    pub master: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_fr_proto_pvc_info() {
    assert_eq!(
        ::std::mem::size_of::<fr_proto_pvc_info>(),
        20usize,
        concat!("Size of: ", stringify!(fr_proto_pvc_info))
    );
    assert_eq!(
        ::std::mem::align_of::<fr_proto_pvc_info>(),
        4usize,
        concat!("Alignment of ", stringify!(fr_proto_pvc_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto_pvc_info>())).dlci as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto_pvc_info),
            "::",
            stringify!(dlci)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fr_proto_pvc_info>())).master as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fr_proto_pvc_info),
            "::",
            stringify!(master)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cisco_proto {
    pub interval: ::std::os::raw::c_uint,
    pub timeout: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_cisco_proto() {
    assert_eq!(
        ::std::mem::size_of::<cisco_proto>(),
        8usize,
        concat!("Size of: ", stringify!(cisco_proto))
    );
    assert_eq!(
        ::std::mem::align_of::<cisco_proto>(),
        4usize,
        concat!("Alignment of ", stringify!(cisco_proto))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cisco_proto>())).interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cisco_proto),
            "::",
            stringify!(interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cisco_proto>())).timeout as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cisco_proto),
            "::",
            stringify!(timeout)
        )
    );
}
pub const net_device_flags_IFF_UP: net_device_flags = 1;
pub const net_device_flags_IFF_BROADCAST: net_device_flags = 2;
pub const net_device_flags_IFF_DEBUG: net_device_flags = 4;
pub const net_device_flags_IFF_LOOPBACK: net_device_flags = 8;
pub const net_device_flags_IFF_POINTOPOINT: net_device_flags = 16;
pub const net_device_flags_IFF_NOTRAILERS: net_device_flags = 32;
pub const net_device_flags_IFF_RUNNING: net_device_flags = 64;
pub const net_device_flags_IFF_NOARP: net_device_flags = 128;
pub const net_device_flags_IFF_PROMISC: net_device_flags = 256;
pub const net_device_flags_IFF_ALLMULTI: net_device_flags = 512;
pub const net_device_flags_IFF_MASTER: net_device_flags = 1024;
pub const net_device_flags_IFF_SLAVE: net_device_flags = 2048;
pub const net_device_flags_IFF_MULTICAST: net_device_flags = 4096;
pub const net_device_flags_IFF_PORTSEL: net_device_flags = 8192;
pub const net_device_flags_IFF_AUTOMEDIA: net_device_flags = 16384;
pub const net_device_flags_IFF_DYNAMIC: net_device_flags = 32768;
pub const net_device_flags_IFF_LOWER_UP: net_device_flags = 65536;
pub const net_device_flags_IFF_DORMANT: net_device_flags = 131072;
pub const net_device_flags_IFF_ECHO: net_device_flags = 262144;
pub type net_device_flags = ::std::os::raw::c_uint;
pub const IF_OPER_UNKNOWN: ::std::os::raw::c_uint = 0;
pub const IF_OPER_NOTPRESENT: ::std::os::raw::c_uint = 1;
pub const IF_OPER_DOWN: ::std::os::raw::c_uint = 2;
pub const IF_OPER_LOWERLAYERDOWN: ::std::os::raw::c_uint = 3;
pub const IF_OPER_TESTING: ::std::os::raw::c_uint = 4;
pub const IF_OPER_DORMANT: ::std::os::raw::c_uint = 5;
pub const IF_OPER_UP: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const IF_LINK_MODE_DEFAULT: ::std::os::raw::c_uint = 0;
pub const IF_LINK_MODE_DORMANT: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifmap {
    pub mem_start: ::std::os::raw::c_ulong,
    pub mem_end: ::std::os::raw::c_ulong,
    pub base_addr: ::std::os::raw::c_ushort,
    pub irq: ::std::os::raw::c_uchar,
    pub dma: ::std::os::raw::c_uchar,
    pub port: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_ifmap() {
    assert_eq!(
        ::std::mem::size_of::<ifmap>(),
        24usize,
        concat!("Size of: ", stringify!(ifmap))
    );
    assert_eq!(
        ::std::mem::align_of::<ifmap>(),
        8usize,
        concat!("Alignment of ", stringify!(ifmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifmap>())).mem_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifmap),
            "::",
            stringify!(mem_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifmap>())).mem_end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifmap),
            "::",
            stringify!(mem_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifmap>())).base_addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ifmap),
            "::",
            stringify!(base_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifmap>())).irq as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ifmap),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifmap>())).dma as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(ifmap),
            "::",
            stringify!(dma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifmap>())).port as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ifmap),
            "::",
            stringify!(port)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct if_settings {
    pub type_: ::std::os::raw::c_uint,
    pub size: ::std::os::raw::c_uint,
    pub ifs_ifsu: if_settings__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union if_settings__bindgen_ty_1 {
    pub raw_hdlc: *mut raw_hdlc_proto,
    pub cisco: *mut cisco_proto,
    pub fr: *mut fr_proto,
    pub fr_pvc: *mut fr_proto_pvc,
    pub fr_pvc_info: *mut fr_proto_pvc_info,
    pub sync: *mut sync_serial_settings,
    pub te1: *mut te1_settings,
}
#[test]
fn bindgen_test_layout_if_settings__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<if_settings__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(if_settings__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<if_settings__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(if_settings__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<if_settings__bindgen_ty_1>())).raw_hdlc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings__bindgen_ty_1),
            "::",
            stringify!(raw_hdlc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_settings__bindgen_ty_1>())).cisco as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings__bindgen_ty_1),
            "::",
            stringify!(cisco)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_settings__bindgen_ty_1>())).fr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings__bindgen_ty_1),
            "::",
            stringify!(fr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<if_settings__bindgen_ty_1>())).fr_pvc as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings__bindgen_ty_1),
            "::",
            stringify!(fr_pvc)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<if_settings__bindgen_ty_1>())).fr_pvc_info as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings__bindgen_ty_1),
            "::",
            stringify!(fr_pvc_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_settings__bindgen_ty_1>())).sync as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings__bindgen_ty_1),
            "::",
            stringify!(sync)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_settings__bindgen_ty_1>())).te1 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings__bindgen_ty_1),
            "::",
            stringify!(te1)
        )
    );
}
#[test]
fn bindgen_test_layout_if_settings() {
    assert_eq!(
        ::std::mem::size_of::<if_settings>(),
        16usize,
        concat!("Size of: ", stringify!(if_settings))
    );
    assert_eq!(
        ::std::mem::align_of::<if_settings>(),
        8usize,
        concat!("Alignment of ", stringify!(if_settings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_settings>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_settings>())).size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_settings>())).ifs_ifsu as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(if_settings),
            "::",
            stringify!(ifs_ifsu)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifreq {
    pub ifr_ifrn: ifreq__bindgen_ty_1,
    pub ifr_ifru: ifreq__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifreq__bindgen_ty_1 {
    pub ifrn_name: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_ifreq__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ifreq__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(ifreq__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ifreq__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(ifreq__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_1>())).ifrn_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_1),
            "::",
            stringify!(ifrn_name)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifreq__bindgen_ty_2 {
    pub ifru_addr: sockaddr,
    pub ifru_dstaddr: sockaddr,
    pub ifru_broadaddr: sockaddr,
    pub ifru_netmask: sockaddr,
    pub ifru_hwaddr: sockaddr,
    pub ifru_flags: ::std::os::raw::c_short,
    pub ifru_ivalue: ::std::os::raw::c_int,
    pub ifru_mtu: ::std::os::raw::c_int,
    pub ifru_map: ifmap,
    pub ifru_slave: [::std::os::raw::c_char; 16usize],
    pub ifru_newname: [::std::os::raw::c_char; 16usize],
    pub ifru_data: *mut ::std::os::raw::c_void,
    pub ifru_settings: if_settings,
}
#[test]
fn bindgen_test_layout_ifreq__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<ifreq__bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(ifreq__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ifreq__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(ifreq__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_dstaddr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_dstaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_broadaddr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_broadaddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_netmask as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_netmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_hwaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_hwaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_ivalue as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_ivalue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_mtu as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_mtu)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_map as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_slave as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_slave)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_newname as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_newname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<ifreq__bindgen_ty_2>())).ifru_settings as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq__bindgen_ty_2),
            "::",
            stringify!(ifru_settings)
        )
    );
}
#[test]
fn bindgen_test_layout_ifreq() {
    assert_eq!(
        ::std::mem::size_of::<ifreq>(),
        40usize,
        concat!("Size of: ", stringify!(ifreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ifreq>(),
        8usize,
        concat!("Alignment of ", stringify!(ifreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq>())).ifr_ifrn as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq),
            "::",
            stringify!(ifr_ifrn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifreq>())).ifr_ifru as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ifreq),
            "::",
            stringify!(ifr_ifru)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ifconf {
    pub ifc_len: ::std::os::raw::c_int,
    pub ifc_ifcu: ifconf__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ifconf__bindgen_ty_1 {
    pub ifcu_buf: *mut ::std::os::raw::c_char,
    pub ifcu_req: *mut ifreq,
}
#[test]
fn bindgen_test_layout_ifconf__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ifconf__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ifconf__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ifconf__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ifconf__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifconf__bindgen_ty_1>())).ifcu_buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifconf__bindgen_ty_1),
            "::",
            stringify!(ifcu_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifconf__bindgen_ty_1>())).ifcu_req as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifconf__bindgen_ty_1),
            "::",
            stringify!(ifcu_req)
        )
    );
}
#[test]
fn bindgen_test_layout_ifconf() {
    assert_eq!(
        ::std::mem::size_of::<ifconf>(),
        16usize,
        concat!("Size of: ", stringify!(ifconf))
    );
    assert_eq!(
        ::std::mem::align_of::<ifconf>(),
        8usize,
        concat!("Alignment of ", stringify!(ifconf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifconf>())).ifc_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifconf),
            "::",
            stringify!(ifc_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifconf>())).ifc_ifcu as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifconf),
            "::",
            stringify!(ifc_ifcu)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_nl {
    pub nl_family: __kernel_sa_family_t,
    pub nl_pad: ::std::os::raw::c_ushort,
    pub nl_pid: __u32,
    pub nl_groups: __u32,
}
#[test]
fn bindgen_test_layout_sockaddr_nl() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_nl>(),
        12usize,
        concat!("Size of: ", stringify!(sockaddr_nl))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_nl>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_nl))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_pad as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_pid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_nl>())).nl_groups as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_nl),
            "::",
            stringify!(nl_groups)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlmsghdr {
    pub nlmsg_len: __u32,
    pub nlmsg_type: __u16,
    pub nlmsg_flags: __u16,
    pub nlmsg_seq: __u32,
    pub nlmsg_pid: __u32,
}
#[test]
fn bindgen_test_layout_nlmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<nlmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(nlmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<nlmsghdr>(),
        4usize,
        concat!("Alignment of ", stringify!(nlmsghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_flags as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_seq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsghdr>())).nlmsg_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsghdr),
            "::",
            stringify!(nlmsg_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlmsgerr {
    pub error: ::std::os::raw::c_int,
    pub msg: nlmsghdr,
}
#[test]
fn bindgen_test_layout_nlmsgerr() {
    assert_eq!(
        ::std::mem::size_of::<nlmsgerr>(),
        20usize,
        concat!("Size of: ", stringify!(nlmsgerr))
    );
    assert_eq!(
        ::std::mem::align_of::<nlmsgerr>(),
        4usize,
        concat!("Alignment of ", stringify!(nlmsgerr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsgerr>())).error as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsgerr),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlmsgerr>())).msg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nlmsgerr),
            "::",
            stringify!(msg)
        )
    );
}
pub const nlmsgerr_attrs_NLMSGERR_ATTR_UNUSED: nlmsgerr_attrs = 0;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_MSG: nlmsgerr_attrs = 1;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_OFFS: nlmsgerr_attrs = 2;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_COOKIE: nlmsgerr_attrs = 3;
pub const nlmsgerr_attrs___NLMSGERR_ATTR_MAX: nlmsgerr_attrs = 4;
pub const nlmsgerr_attrs_NLMSGERR_ATTR_MAX: nlmsgerr_attrs = 3;
pub type nlmsgerr_attrs = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_pktinfo {
    pub group: __u32,
}
#[test]
fn bindgen_test_layout_nl_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<nl_pktinfo>(),
        4usize,
        concat!("Size of: ", stringify!(nl_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<nl_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(nl_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_pktinfo>())).group as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_pktinfo),
            "::",
            stringify!(group)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_mmap_req {
    pub nm_block_size: ::std::os::raw::c_uint,
    pub nm_block_nr: ::std::os::raw::c_uint,
    pub nm_frame_size: ::std::os::raw::c_uint,
    pub nm_frame_nr: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_nl_mmap_req() {
    assert_eq!(
        ::std::mem::size_of::<nl_mmap_req>(),
        16usize,
        concat!("Size of: ", stringify!(nl_mmap_req))
    );
    assert_eq!(
        ::std::mem::align_of::<nl_mmap_req>(),
        4usize,
        concat!("Alignment of ", stringify!(nl_mmap_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_block_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_block_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_block_nr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_block_nr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_frame_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_frame_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_req>())).nm_frame_nr as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_req),
            "::",
            stringify!(nm_frame_nr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nl_mmap_hdr {
    pub nm_status: ::std::os::raw::c_uint,
    pub nm_len: ::std::os::raw::c_uint,
    pub nm_group: __u32,
    pub nm_pid: __u32,
    pub nm_uid: __u32,
    pub nm_gid: __u32,
}
#[test]
fn bindgen_test_layout_nl_mmap_hdr() {
    assert_eq!(
        ::std::mem::size_of::<nl_mmap_hdr>(),
        24usize,
        concat!("Size of: ", stringify!(nl_mmap_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<nl_mmap_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(nl_mmap_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nl_mmap_hdr>())).nm_gid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(nl_mmap_hdr),
            "::",
            stringify!(nm_gid)
        )
    );
}
pub const nl_mmap_status_NL_MMAP_STATUS_UNUSED: nl_mmap_status = 0;
pub const nl_mmap_status_NL_MMAP_STATUS_RESERVED: nl_mmap_status = 1;
pub const nl_mmap_status_NL_MMAP_STATUS_VALID: nl_mmap_status = 2;
pub const nl_mmap_status_NL_MMAP_STATUS_COPY: nl_mmap_status = 3;
pub const nl_mmap_status_NL_MMAP_STATUS_SKIP: nl_mmap_status = 4;
pub type nl_mmap_status = ::std::os::raw::c_uint;
pub const NETLINK_UNCONNECTED: ::std::os::raw::c_uint = 0;
pub const NETLINK_CONNECTED: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nlattr {
    pub nla_len: __u16,
    pub nla_type: __u16,
}
#[test]
fn bindgen_test_layout_nlattr() {
    assert_eq!(
        ::std::mem::size_of::<nlattr>(),
        4usize,
        concat!("Size of: ", stringify!(nlattr))
    );
    assert_eq!(
        ::std::mem::align_of::<nlattr>(),
        2usize,
        concat!("Alignment of ", stringify!(nlattr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlattr>())).nla_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nlattr),
            "::",
            stringify!(nla_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nlattr>())).nla_type as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nlattr),
            "::",
            stringify!(nla_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nla_bitfield32 {
    pub value: __u32,
    pub selector: __u32,
}
#[test]
fn bindgen_test_layout_nla_bitfield32() {
    assert_eq!(
        ::std::mem::size_of::<nla_bitfield32>(),
        8usize,
        concat!("Size of: ", stringify!(nla_bitfield32))
    );
    assert_eq!(
        ::std::mem::align_of::<nla_bitfield32>(),
        4usize,
        concat!("Alignment of ", stringify!(nla_bitfield32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nla_bitfield32>())).value as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nla_bitfield32),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nla_bitfield32>())).selector as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nla_bitfield32),
            "::",
            stringify!(selector)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtnl_link_stats {
    pub rx_packets: __u32,
    pub tx_packets: __u32,
    pub rx_bytes: __u32,
    pub tx_bytes: __u32,
    pub rx_errors: __u32,
    pub tx_errors: __u32,
    pub rx_dropped: __u32,
    pub tx_dropped: __u32,
    pub multicast: __u32,
    pub collisions: __u32,
    pub rx_length_errors: __u32,
    pub rx_over_errors: __u32,
    pub rx_crc_errors: __u32,
    pub rx_frame_errors: __u32,
    pub rx_fifo_errors: __u32,
    pub rx_missed_errors: __u32,
    pub tx_aborted_errors: __u32,
    pub tx_carrier_errors: __u32,
    pub tx_fifo_errors: __u32,
    pub tx_heartbeat_errors: __u32,
    pub tx_window_errors: __u32,
    pub rx_compressed: __u32,
    pub tx_compressed: __u32,
    pub rx_nohandler: __u32,
}
#[test]
fn bindgen_test_layout_rtnl_link_stats() {
    assert_eq!(
        ::std::mem::size_of::<rtnl_link_stats>(),
        96usize,
        concat!("Size of: ", stringify!(rtnl_link_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<rtnl_link_stats>(),
        4usize,
        concat!("Alignment of ", stringify!(rtnl_link_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_packets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_packets as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_bytes as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_errors as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_errors as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_dropped as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_dropped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_dropped as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_dropped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).multicast as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(multicast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).collisions as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(collisions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).rx_length_errors as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_length_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_over_errors as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_over_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_crc_errors as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_crc_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_frame_errors as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_frame_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_fifo_errors as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_fifo_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).rx_missed_errors as *const _ as usize
        },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_missed_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).tx_aborted_errors as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_aborted_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).tx_carrier_errors as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_carrier_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_fifo_errors as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_fifo_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).tx_heartbeat_errors as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_heartbeat_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats>())).tx_window_errors as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_window_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_compressed as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).tx_compressed as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(tx_compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats>())).rx_nohandler as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats),
            "::",
            stringify!(rx_nohandler)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtnl_link_stats64 {
    pub rx_packets: __u64,
    pub tx_packets: __u64,
    pub rx_bytes: __u64,
    pub tx_bytes: __u64,
    pub rx_errors: __u64,
    pub tx_errors: __u64,
    pub rx_dropped: __u64,
    pub tx_dropped: __u64,
    pub multicast: __u64,
    pub collisions: __u64,
    pub rx_length_errors: __u64,
    pub rx_over_errors: __u64,
    pub rx_crc_errors: __u64,
    pub rx_frame_errors: __u64,
    pub rx_fifo_errors: __u64,
    pub rx_missed_errors: __u64,
    pub tx_aborted_errors: __u64,
    pub tx_carrier_errors: __u64,
    pub tx_fifo_errors: __u64,
    pub tx_heartbeat_errors: __u64,
    pub tx_window_errors: __u64,
    pub rx_compressed: __u64,
    pub tx_compressed: __u64,
    pub rx_nohandler: __u64,
}
#[test]
fn bindgen_test_layout_rtnl_link_stats64() {
    assert_eq!(
        ::std::mem::size_of::<rtnl_link_stats64>(),
        192usize,
        concat!("Size of: ", stringify!(rtnl_link_stats64))
    );
    assert_eq!(
        ::std::mem::align_of::<rtnl_link_stats64>(),
        8usize,
        concat!("Alignment of ", stringify!(rtnl_link_stats64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_packets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_packets as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_bytes as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_bytes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_errors as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_errors as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_dropped as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_dropped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_dropped as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_dropped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).multicast as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(multicast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).collisions as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(collisions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_length_errors as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_length_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_over_errors as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_over_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_crc_errors as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_crc_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_frame_errors as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_frame_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_fifo_errors as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_fifo_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_missed_errors as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_missed_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_aborted_errors as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_aborted_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_carrier_errors as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_carrier_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_fifo_errors as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_fifo_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_heartbeat_errors as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_heartbeat_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_window_errors as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_window_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_compressed as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).tx_compressed as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(tx_compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_stats64>())).rx_nohandler as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_stats64),
            "::",
            stringify!(rx_nohandler)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtnl_link_ifmap {
    pub mem_start: __u64,
    pub mem_end: __u64,
    pub base_addr: __u64,
    pub irq: __u16,
    pub dma: __u8,
    pub port: __u8,
}
#[test]
fn bindgen_test_layout_rtnl_link_ifmap() {
    assert_eq!(
        ::std::mem::size_of::<rtnl_link_ifmap>(),
        32usize,
        concat!("Size of: ", stringify!(rtnl_link_ifmap))
    );
    assert_eq!(
        ::std::mem::align_of::<rtnl_link_ifmap>(),
        8usize,
        concat!("Alignment of ", stringify!(rtnl_link_ifmap))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).mem_start as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(mem_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).mem_end as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(mem_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).base_addr as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(base_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).irq as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(irq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).dma as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(dma)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnl_link_ifmap>())).port as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnl_link_ifmap),
            "::",
            stringify!(port)
        )
    );
}
pub const IFLA_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_ADDRESS: ::std::os::raw::c_uint = 1;
pub const IFLA_BROADCAST: ::std::os::raw::c_uint = 2;
pub const IFLA_IFNAME: ::std::os::raw::c_uint = 3;
pub const IFLA_MTU: ::std::os::raw::c_uint = 4;
pub const IFLA_LINK: ::std::os::raw::c_uint = 5;
pub const IFLA_QDISC: ::std::os::raw::c_uint = 6;
pub const IFLA_STATS: ::std::os::raw::c_uint = 7;
pub const IFLA_COST: ::std::os::raw::c_uint = 8;
pub const IFLA_PRIORITY: ::std::os::raw::c_uint = 9;
pub const IFLA_MASTER: ::std::os::raw::c_uint = 10;
pub const IFLA_WIRELESS: ::std::os::raw::c_uint = 11;
pub const IFLA_PROTINFO: ::std::os::raw::c_uint = 12;
pub const IFLA_TXQLEN: ::std::os::raw::c_uint = 13;
pub const IFLA_MAP: ::std::os::raw::c_uint = 14;
pub const IFLA_WEIGHT: ::std::os::raw::c_uint = 15;
pub const IFLA_OPERSTATE: ::std::os::raw::c_uint = 16;
pub const IFLA_LINKMODE: ::std::os::raw::c_uint = 17;
pub const IFLA_LINKINFO: ::std::os::raw::c_uint = 18;
pub const IFLA_NET_NS_PID: ::std::os::raw::c_uint = 19;
pub const IFLA_IFALIAS: ::std::os::raw::c_uint = 20;
pub const IFLA_NUM_VF: ::std::os::raw::c_uint = 21;
pub const IFLA_VFINFO_LIST: ::std::os::raw::c_uint = 22;
pub const IFLA_STATS64: ::std::os::raw::c_uint = 23;
pub const IFLA_VF_PORTS: ::std::os::raw::c_uint = 24;
pub const IFLA_PORT_SELF: ::std::os::raw::c_uint = 25;
pub const IFLA_AF_SPEC: ::std::os::raw::c_uint = 26;
pub const IFLA_GROUP: ::std::os::raw::c_uint = 27;
pub const IFLA_NET_NS_FD: ::std::os::raw::c_uint = 28;
pub const IFLA_EXT_MASK: ::std::os::raw::c_uint = 29;
pub const IFLA_PROMISCUITY: ::std::os::raw::c_uint = 30;
pub const IFLA_NUM_TX_QUEUES: ::std::os::raw::c_uint = 31;
pub const IFLA_NUM_RX_QUEUES: ::std::os::raw::c_uint = 32;
pub const IFLA_CARRIER: ::std::os::raw::c_uint = 33;
pub const IFLA_PHYS_PORT_ID: ::std::os::raw::c_uint = 34;
pub const IFLA_CARRIER_CHANGES: ::std::os::raw::c_uint = 35;
pub const IFLA_PHYS_SWITCH_ID: ::std::os::raw::c_uint = 36;
pub const IFLA_LINK_NETNSID: ::std::os::raw::c_uint = 37;
pub const IFLA_PHYS_PORT_NAME: ::std::os::raw::c_uint = 38;
pub const IFLA_PROTO_DOWN: ::std::os::raw::c_uint = 39;
pub const IFLA_GSO_MAX_SEGS: ::std::os::raw::c_uint = 40;
pub const IFLA_GSO_MAX_SIZE: ::std::os::raw::c_uint = 41;
pub const IFLA_PAD: ::std::os::raw::c_uint = 42;
pub const IFLA_XDP: ::std::os::raw::c_uint = 43;
pub const IFLA_EVENT: ::std::os::raw::c_uint = 44;
pub const IFLA_NEW_NETNSID: ::std::os::raw::c_uint = 45;
pub const IFLA_IF_NETNSID: ::std::os::raw::c_uint = 46;
pub const IFLA_CARRIER_UP_COUNT: ::std::os::raw::c_uint = 47;
pub const IFLA_CARRIER_DOWN_COUNT: ::std::os::raw::c_uint = 48;
pub const IFLA_NEW_IFINDEX: ::std::os::raw::c_uint = 49;
pub const IFLA_MIN_MTU: ::std::os::raw::c_uint = 50;
pub const IFLA_MAX_MTU: ::std::os::raw::c_uint = 51;
pub const __IFLA_MAX: ::std::os::raw::c_uint = 52;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const IFLA_INET_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_INET_CONF: ::std::os::raw::c_uint = 1;
pub const __IFLA_INET_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
pub const IFLA_INET6_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_INET6_FLAGS: ::std::os::raw::c_uint = 1;
pub const IFLA_INET6_CONF: ::std::os::raw::c_uint = 2;
pub const IFLA_INET6_STATS: ::std::os::raw::c_uint = 3;
pub const IFLA_INET6_MCAST: ::std::os::raw::c_uint = 4;
pub const IFLA_INET6_CACHEINFO: ::std::os::raw::c_uint = 5;
pub const IFLA_INET6_ICMP6STATS: ::std::os::raw::c_uint = 6;
pub const IFLA_INET6_TOKEN: ::std::os::raw::c_uint = 7;
pub const IFLA_INET6_ADDR_GEN_MODE: ::std::os::raw::c_uint = 8;
pub const __IFLA_INET6_MAX: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const in6_addr_gen_mode_IN6_ADDR_GEN_MODE_EUI64: in6_addr_gen_mode = 0;
pub const in6_addr_gen_mode_IN6_ADDR_GEN_MODE_NONE: in6_addr_gen_mode = 1;
pub const in6_addr_gen_mode_IN6_ADDR_GEN_MODE_STABLE_PRIVACY: in6_addr_gen_mode = 2;
pub const in6_addr_gen_mode_IN6_ADDR_GEN_MODE_RANDOM: in6_addr_gen_mode = 3;
pub type in6_addr_gen_mode = ::std::os::raw::c_uint;
pub const IFLA_BR_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_BR_FORWARD_DELAY: ::std::os::raw::c_uint = 1;
pub const IFLA_BR_HELLO_TIME: ::std::os::raw::c_uint = 2;
pub const IFLA_BR_MAX_AGE: ::std::os::raw::c_uint = 3;
pub const IFLA_BR_AGEING_TIME: ::std::os::raw::c_uint = 4;
pub const IFLA_BR_STP_STATE: ::std::os::raw::c_uint = 5;
pub const IFLA_BR_PRIORITY: ::std::os::raw::c_uint = 6;
pub const IFLA_BR_VLAN_FILTERING: ::std::os::raw::c_uint = 7;
pub const IFLA_BR_VLAN_PROTOCOL: ::std::os::raw::c_uint = 8;
pub const IFLA_BR_GROUP_FWD_MASK: ::std::os::raw::c_uint = 9;
pub const IFLA_BR_ROOT_ID: ::std::os::raw::c_uint = 10;
pub const IFLA_BR_BRIDGE_ID: ::std::os::raw::c_uint = 11;
pub const IFLA_BR_ROOT_PORT: ::std::os::raw::c_uint = 12;
pub const IFLA_BR_ROOT_PATH_COST: ::std::os::raw::c_uint = 13;
pub const IFLA_BR_TOPOLOGY_CHANGE: ::std::os::raw::c_uint = 14;
pub const IFLA_BR_TOPOLOGY_CHANGE_DETECTED: ::std::os::raw::c_uint = 15;
pub const IFLA_BR_HELLO_TIMER: ::std::os::raw::c_uint = 16;
pub const IFLA_BR_TCN_TIMER: ::std::os::raw::c_uint = 17;
pub const IFLA_BR_TOPOLOGY_CHANGE_TIMER: ::std::os::raw::c_uint = 18;
pub const IFLA_BR_GC_TIMER: ::std::os::raw::c_uint = 19;
pub const IFLA_BR_GROUP_ADDR: ::std::os::raw::c_uint = 20;
pub const IFLA_BR_FDB_FLUSH: ::std::os::raw::c_uint = 21;
pub const IFLA_BR_MCAST_ROUTER: ::std::os::raw::c_uint = 22;
pub const IFLA_BR_MCAST_SNOOPING: ::std::os::raw::c_uint = 23;
pub const IFLA_BR_MCAST_QUERY_USE_IFADDR: ::std::os::raw::c_uint = 24;
pub const IFLA_BR_MCAST_QUERIER: ::std::os::raw::c_uint = 25;
pub const IFLA_BR_MCAST_HASH_ELASTICITY: ::std::os::raw::c_uint = 26;
pub const IFLA_BR_MCAST_HASH_MAX: ::std::os::raw::c_uint = 27;
pub const IFLA_BR_MCAST_LAST_MEMBER_CNT: ::std::os::raw::c_uint = 28;
pub const IFLA_BR_MCAST_STARTUP_QUERY_CNT: ::std::os::raw::c_uint = 29;
pub const IFLA_BR_MCAST_LAST_MEMBER_INTVL: ::std::os::raw::c_uint = 30;
pub const IFLA_BR_MCAST_MEMBERSHIP_INTVL: ::std::os::raw::c_uint = 31;
pub const IFLA_BR_MCAST_QUERIER_INTVL: ::std::os::raw::c_uint = 32;
pub const IFLA_BR_MCAST_QUERY_INTVL: ::std::os::raw::c_uint = 33;
pub const IFLA_BR_MCAST_QUERY_RESPONSE_INTVL: ::std::os::raw::c_uint = 34;
pub const IFLA_BR_MCAST_STARTUP_QUERY_INTVL: ::std::os::raw::c_uint = 35;
pub const IFLA_BR_NF_CALL_IPTABLES: ::std::os::raw::c_uint = 36;
pub const IFLA_BR_NF_CALL_IP6TABLES: ::std::os::raw::c_uint = 37;
pub const IFLA_BR_NF_CALL_ARPTABLES: ::std::os::raw::c_uint = 38;
pub const IFLA_BR_VLAN_DEFAULT_PVID: ::std::os::raw::c_uint = 39;
pub const IFLA_BR_PAD: ::std::os::raw::c_uint = 40;
pub const IFLA_BR_VLAN_STATS_ENABLED: ::std::os::raw::c_uint = 41;
pub const IFLA_BR_MCAST_STATS_ENABLED: ::std::os::raw::c_uint = 42;
pub const IFLA_BR_MCAST_IGMP_VERSION: ::std::os::raw::c_uint = 43;
pub const IFLA_BR_MCAST_MLD_VERSION: ::std::os::raw::c_uint = 44;
pub const __IFLA_BR_MAX: ::std::os::raw::c_uint = 45;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_bridge_id {
    pub prio: [__u8; 2usize],
    pub addr: [__u8; 6usize],
}
#[test]
fn bindgen_test_layout_ifla_bridge_id() {
    assert_eq!(
        ::std::mem::size_of::<ifla_bridge_id>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_bridge_id))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_bridge_id>(),
        1usize,
        concat!("Alignment of ", stringify!(ifla_bridge_id))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_bridge_id>())).prio as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_bridge_id),
            "::",
            stringify!(prio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_bridge_id>())).addr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_bridge_id),
            "::",
            stringify!(addr)
        )
    );
}
pub const BRIDGE_MODE_UNSPEC: ::std::os::raw::c_uint = 0;
pub const BRIDGE_MODE_HAIRPIN: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const IFLA_BRPORT_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_BRPORT_STATE: ::std::os::raw::c_uint = 1;
pub const IFLA_BRPORT_PRIORITY: ::std::os::raw::c_uint = 2;
pub const IFLA_BRPORT_COST: ::std::os::raw::c_uint = 3;
pub const IFLA_BRPORT_MODE: ::std::os::raw::c_uint = 4;
pub const IFLA_BRPORT_GUARD: ::std::os::raw::c_uint = 5;
pub const IFLA_BRPORT_PROTECT: ::std::os::raw::c_uint = 6;
pub const IFLA_BRPORT_FAST_LEAVE: ::std::os::raw::c_uint = 7;
pub const IFLA_BRPORT_LEARNING: ::std::os::raw::c_uint = 8;
pub const IFLA_BRPORT_UNICAST_FLOOD: ::std::os::raw::c_uint = 9;
pub const IFLA_BRPORT_PROXYARP: ::std::os::raw::c_uint = 10;
pub const IFLA_BRPORT_LEARNING_SYNC: ::std::os::raw::c_uint = 11;
pub const IFLA_BRPORT_PROXYARP_WIFI: ::std::os::raw::c_uint = 12;
pub const IFLA_BRPORT_ROOT_ID: ::std::os::raw::c_uint = 13;
pub const IFLA_BRPORT_BRIDGE_ID: ::std::os::raw::c_uint = 14;
pub const IFLA_BRPORT_DESIGNATED_PORT: ::std::os::raw::c_uint = 15;
pub const IFLA_BRPORT_DESIGNATED_COST: ::std::os::raw::c_uint = 16;
pub const IFLA_BRPORT_ID: ::std::os::raw::c_uint = 17;
pub const IFLA_BRPORT_NO: ::std::os::raw::c_uint = 18;
pub const IFLA_BRPORT_TOPOLOGY_CHANGE_ACK: ::std::os::raw::c_uint = 19;
pub const IFLA_BRPORT_CONFIG_PENDING: ::std::os::raw::c_uint = 20;
pub const IFLA_BRPORT_MESSAGE_AGE_TIMER: ::std::os::raw::c_uint = 21;
pub const IFLA_BRPORT_FORWARD_DELAY_TIMER: ::std::os::raw::c_uint = 22;
pub const IFLA_BRPORT_HOLD_TIMER: ::std::os::raw::c_uint = 23;
pub const IFLA_BRPORT_FLUSH: ::std::os::raw::c_uint = 24;
pub const IFLA_BRPORT_MULTICAST_ROUTER: ::std::os::raw::c_uint = 25;
pub const IFLA_BRPORT_PAD: ::std::os::raw::c_uint = 26;
pub const IFLA_BRPORT_MCAST_FLOOD: ::std::os::raw::c_uint = 27;
pub const IFLA_BRPORT_MCAST_TO_UCAST: ::std::os::raw::c_uint = 28;
pub const IFLA_BRPORT_VLAN_TUNNEL: ::std::os::raw::c_uint = 29;
pub const IFLA_BRPORT_BCAST_FLOOD: ::std::os::raw::c_uint = 30;
pub const IFLA_BRPORT_GROUP_FWD_MASK: ::std::os::raw::c_uint = 31;
pub const IFLA_BRPORT_NEIGH_SUPPRESS: ::std::os::raw::c_uint = 32;
pub const IFLA_BRPORT_ISOLATED: ::std::os::raw::c_uint = 33;
pub const IFLA_BRPORT_BACKUP_PORT: ::std::os::raw::c_uint = 34;
pub const __IFLA_BRPORT_MAX: ::std::os::raw::c_uint = 35;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_cacheinfo {
    pub max_reasm_len: __u32,
    pub tstamp: __u32,
    pub reachable_time: __u32,
    pub retrans_time: __u32,
}
#[test]
fn bindgen_test_layout_ifla_cacheinfo() {
    assert_eq!(
        ::std::mem::size_of::<ifla_cacheinfo>(),
        16usize,
        concat!("Size of: ", stringify!(ifla_cacheinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_cacheinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_cacheinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_cacheinfo>())).max_reasm_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_cacheinfo),
            "::",
            stringify!(max_reasm_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_cacheinfo>())).tstamp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_cacheinfo),
            "::",
            stringify!(tstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_cacheinfo>())).reachable_time as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_cacheinfo),
            "::",
            stringify!(reachable_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_cacheinfo>())).retrans_time as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_cacheinfo),
            "::",
            stringify!(retrans_time)
        )
    );
}
pub const IFLA_INFO_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_INFO_KIND: ::std::os::raw::c_uint = 1;
pub const IFLA_INFO_DATA: ::std::os::raw::c_uint = 2;
pub const IFLA_INFO_XSTATS: ::std::os::raw::c_uint = 3;
pub const IFLA_INFO_SLAVE_KIND: ::std::os::raw::c_uint = 4;
pub const IFLA_INFO_SLAVE_DATA: ::std::os::raw::c_uint = 5;
pub const __IFLA_INFO_MAX: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
pub const IFLA_VLAN_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VLAN_ID: ::std::os::raw::c_uint = 1;
pub const IFLA_VLAN_FLAGS: ::std::os::raw::c_uint = 2;
pub const IFLA_VLAN_EGRESS_QOS: ::std::os::raw::c_uint = 3;
pub const IFLA_VLAN_INGRESS_QOS: ::std::os::raw::c_uint = 4;
pub const IFLA_VLAN_PROTOCOL: ::std::os::raw::c_uint = 5;
pub const __IFLA_VLAN_MAX: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vlan_flags {
    pub flags: __u32,
    pub mask: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vlan_flags() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vlan_flags>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vlan_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vlan_flags>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vlan_flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vlan_flags>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vlan_flags),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vlan_flags>())).mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vlan_flags),
            "::",
            stringify!(mask)
        )
    );
}
pub const IFLA_VLAN_QOS_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VLAN_QOS_MAPPING: ::std::os::raw::c_uint = 1;
pub const __IFLA_VLAN_QOS_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vlan_qos_mapping {
    pub from: __u32,
    pub to: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vlan_qos_mapping() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vlan_qos_mapping>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vlan_qos_mapping))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vlan_qos_mapping>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vlan_qos_mapping))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vlan_qos_mapping>())).from as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vlan_qos_mapping),
            "::",
            stringify!(from)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vlan_qos_mapping>())).to as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vlan_qos_mapping),
            "::",
            stringify!(to)
        )
    );
}
pub const IFLA_MACVLAN_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_MACVLAN_MODE: ::std::os::raw::c_uint = 1;
pub const IFLA_MACVLAN_FLAGS: ::std::os::raw::c_uint = 2;
pub const IFLA_MACVLAN_MACADDR_MODE: ::std::os::raw::c_uint = 3;
pub const IFLA_MACVLAN_MACADDR: ::std::os::raw::c_uint = 4;
pub const IFLA_MACVLAN_MACADDR_DATA: ::std::os::raw::c_uint = 5;
pub const IFLA_MACVLAN_MACADDR_COUNT: ::std::os::raw::c_uint = 6;
pub const __IFLA_MACVLAN_MAX: ::std::os::raw::c_uint = 7;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
pub const macvlan_mode_MACVLAN_MODE_PRIVATE: macvlan_mode = 1;
pub const macvlan_mode_MACVLAN_MODE_VEPA: macvlan_mode = 2;
pub const macvlan_mode_MACVLAN_MODE_BRIDGE: macvlan_mode = 4;
pub const macvlan_mode_MACVLAN_MODE_PASSTHRU: macvlan_mode = 8;
pub const macvlan_mode_MACVLAN_MODE_SOURCE: macvlan_mode = 16;
pub type macvlan_mode = ::std::os::raw::c_uint;
pub const macvlan_macaddr_mode_MACVLAN_MACADDR_ADD: macvlan_macaddr_mode = 0;
pub const macvlan_macaddr_mode_MACVLAN_MACADDR_DEL: macvlan_macaddr_mode = 1;
pub const macvlan_macaddr_mode_MACVLAN_MACADDR_FLUSH: macvlan_macaddr_mode = 2;
pub const macvlan_macaddr_mode_MACVLAN_MACADDR_SET: macvlan_macaddr_mode = 3;
pub type macvlan_macaddr_mode = ::std::os::raw::c_uint;
pub const IFLA_VRF_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VRF_TABLE: ::std::os::raw::c_uint = 1;
pub const __IFLA_VRF_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
pub const IFLA_VRF_PORT_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VRF_PORT_TABLE: ::std::os::raw::c_uint = 1;
pub const __IFLA_VRF_PORT_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
pub const IFLA_MACSEC_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_MACSEC_SCI: ::std::os::raw::c_uint = 1;
pub const IFLA_MACSEC_PORT: ::std::os::raw::c_uint = 2;
pub const IFLA_MACSEC_ICV_LEN: ::std::os::raw::c_uint = 3;
pub const IFLA_MACSEC_CIPHER_SUITE: ::std::os::raw::c_uint = 4;
pub const IFLA_MACSEC_WINDOW: ::std::os::raw::c_uint = 5;
pub const IFLA_MACSEC_ENCODING_SA: ::std::os::raw::c_uint = 6;
pub const IFLA_MACSEC_ENCRYPT: ::std::os::raw::c_uint = 7;
pub const IFLA_MACSEC_PROTECT: ::std::os::raw::c_uint = 8;
pub const IFLA_MACSEC_INC_SCI: ::std::os::raw::c_uint = 9;
pub const IFLA_MACSEC_ES: ::std::os::raw::c_uint = 10;
pub const IFLA_MACSEC_SCB: ::std::os::raw::c_uint = 11;
pub const IFLA_MACSEC_REPLAY_PROTECT: ::std::os::raw::c_uint = 12;
pub const IFLA_MACSEC_VALIDATION: ::std::os::raw::c_uint = 13;
pub const IFLA_MACSEC_PAD: ::std::os::raw::c_uint = 14;
pub const __IFLA_MACSEC_MAX: ::std::os::raw::c_uint = 15;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
pub const IFLA_XFRM_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_XFRM_LINK: ::std::os::raw::c_uint = 1;
pub const IFLA_XFRM_IF_ID: ::std::os::raw::c_uint = 2;
pub const __IFLA_XFRM_MAX: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
pub const macsec_validation_type_MACSEC_VALIDATE_DISABLED: macsec_validation_type = 0;
pub const macsec_validation_type_MACSEC_VALIDATE_CHECK: macsec_validation_type = 1;
pub const macsec_validation_type_MACSEC_VALIDATE_STRICT: macsec_validation_type = 2;
pub const macsec_validation_type___MACSEC_VALIDATE_END: macsec_validation_type = 3;
pub const macsec_validation_type_MACSEC_VALIDATE_MAX: macsec_validation_type = 2;
pub type macsec_validation_type = ::std::os::raw::c_uint;
pub const IFLA_IPVLAN_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_IPVLAN_MODE: ::std::os::raw::c_uint = 1;
pub const IFLA_IPVLAN_FLAGS: ::std::os::raw::c_uint = 2;
pub const __IFLA_IPVLAN_MAX: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
pub const ipvlan_mode_IPVLAN_MODE_L2: ipvlan_mode = 0;
pub const ipvlan_mode_IPVLAN_MODE_L3: ipvlan_mode = 1;
pub const ipvlan_mode_IPVLAN_MODE_L3S: ipvlan_mode = 2;
pub const ipvlan_mode_IPVLAN_MODE_MAX: ipvlan_mode = 3;
pub type ipvlan_mode = ::std::os::raw::c_uint;
pub const IFLA_VXLAN_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VXLAN_ID: ::std::os::raw::c_uint = 1;
pub const IFLA_VXLAN_GROUP: ::std::os::raw::c_uint = 2;
pub const IFLA_VXLAN_LINK: ::std::os::raw::c_uint = 3;
pub const IFLA_VXLAN_LOCAL: ::std::os::raw::c_uint = 4;
pub const IFLA_VXLAN_TTL: ::std::os::raw::c_uint = 5;
pub const IFLA_VXLAN_TOS: ::std::os::raw::c_uint = 6;
pub const IFLA_VXLAN_LEARNING: ::std::os::raw::c_uint = 7;
pub const IFLA_VXLAN_AGEING: ::std::os::raw::c_uint = 8;
pub const IFLA_VXLAN_LIMIT: ::std::os::raw::c_uint = 9;
pub const IFLA_VXLAN_PORT_RANGE: ::std::os::raw::c_uint = 10;
pub const IFLA_VXLAN_PROXY: ::std::os::raw::c_uint = 11;
pub const IFLA_VXLAN_RSC: ::std::os::raw::c_uint = 12;
pub const IFLA_VXLAN_L2MISS: ::std::os::raw::c_uint = 13;
pub const IFLA_VXLAN_L3MISS: ::std::os::raw::c_uint = 14;
pub const IFLA_VXLAN_PORT: ::std::os::raw::c_uint = 15;
pub const IFLA_VXLAN_GROUP6: ::std::os::raw::c_uint = 16;
pub const IFLA_VXLAN_LOCAL6: ::std::os::raw::c_uint = 17;
pub const IFLA_VXLAN_UDP_CSUM: ::std::os::raw::c_uint = 18;
pub const IFLA_VXLAN_UDP_ZERO_CSUM6_TX: ::std::os::raw::c_uint = 19;
pub const IFLA_VXLAN_UDP_ZERO_CSUM6_RX: ::std::os::raw::c_uint = 20;
pub const IFLA_VXLAN_REMCSUM_TX: ::std::os::raw::c_uint = 21;
pub const IFLA_VXLAN_REMCSUM_RX: ::std::os::raw::c_uint = 22;
pub const IFLA_VXLAN_GBP: ::std::os::raw::c_uint = 23;
pub const IFLA_VXLAN_REMCSUM_NOPARTIAL: ::std::os::raw::c_uint = 24;
pub const IFLA_VXLAN_COLLECT_METADATA: ::std::os::raw::c_uint = 25;
pub const IFLA_VXLAN_LABEL: ::std::os::raw::c_uint = 26;
pub const IFLA_VXLAN_GPE: ::std::os::raw::c_uint = 27;
pub const IFLA_VXLAN_TTL_INHERIT: ::std::os::raw::c_uint = 28;
pub const __IFLA_VXLAN_MAX: ::std::os::raw::c_uint = 29;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vxlan_port_range {
    pub low: __be16,
    pub high: __be16,
}
#[test]
fn bindgen_test_layout_ifla_vxlan_port_range() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vxlan_port_range>(),
        4usize,
        concat!("Size of: ", stringify!(ifla_vxlan_port_range))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vxlan_port_range>(),
        2usize,
        concat!("Alignment of ", stringify!(ifla_vxlan_port_range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vxlan_port_range>())).low as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vxlan_port_range),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vxlan_port_range>())).high as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vxlan_port_range),
            "::",
            stringify!(high)
        )
    );
}
pub const IFLA_GENEVE_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_GENEVE_ID: ::std::os::raw::c_uint = 1;
pub const IFLA_GENEVE_REMOTE: ::std::os::raw::c_uint = 2;
pub const IFLA_GENEVE_TTL: ::std::os::raw::c_uint = 3;
pub const IFLA_GENEVE_TOS: ::std::os::raw::c_uint = 4;
pub const IFLA_GENEVE_PORT: ::std::os::raw::c_uint = 5;
pub const IFLA_GENEVE_COLLECT_METADATA: ::std::os::raw::c_uint = 6;
pub const IFLA_GENEVE_REMOTE6: ::std::os::raw::c_uint = 7;
pub const IFLA_GENEVE_UDP_CSUM: ::std::os::raw::c_uint = 8;
pub const IFLA_GENEVE_UDP_ZERO_CSUM6_TX: ::std::os::raw::c_uint = 9;
pub const IFLA_GENEVE_UDP_ZERO_CSUM6_RX: ::std::os::raw::c_uint = 10;
pub const IFLA_GENEVE_LABEL: ::std::os::raw::c_uint = 11;
pub const __IFLA_GENEVE_MAX: ::std::os::raw::c_uint = 12;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
pub const IFLA_PPP_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_PPP_DEV_FD: ::std::os::raw::c_uint = 1;
pub const __IFLA_PPP_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
pub const ifla_gtp_role_GTP_ROLE_GGSN: ifla_gtp_role = 0;
pub const ifla_gtp_role_GTP_ROLE_SGSN: ifla_gtp_role = 1;
pub type ifla_gtp_role = ::std::os::raw::c_uint;
pub const IFLA_GTP_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_GTP_FD0: ::std::os::raw::c_uint = 1;
pub const IFLA_GTP_FD1: ::std::os::raw::c_uint = 2;
pub const IFLA_GTP_PDP_HASHSIZE: ::std::os::raw::c_uint = 3;
pub const IFLA_GTP_ROLE: ::std::os::raw::c_uint = 4;
pub const __IFLA_GTP_MAX: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
pub const IFLA_BOND_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_BOND_MODE: ::std::os::raw::c_uint = 1;
pub const IFLA_BOND_ACTIVE_SLAVE: ::std::os::raw::c_uint = 2;
pub const IFLA_BOND_MIIMON: ::std::os::raw::c_uint = 3;
pub const IFLA_BOND_UPDELAY: ::std::os::raw::c_uint = 4;
pub const IFLA_BOND_DOWNDELAY: ::std::os::raw::c_uint = 5;
pub const IFLA_BOND_USE_CARRIER: ::std::os::raw::c_uint = 6;
pub const IFLA_BOND_ARP_INTERVAL: ::std::os::raw::c_uint = 7;
pub const IFLA_BOND_ARP_IP_TARGET: ::std::os::raw::c_uint = 8;
pub const IFLA_BOND_ARP_VALIDATE: ::std::os::raw::c_uint = 9;
pub const IFLA_BOND_ARP_ALL_TARGETS: ::std::os::raw::c_uint = 10;
pub const IFLA_BOND_PRIMARY: ::std::os::raw::c_uint = 11;
pub const IFLA_BOND_PRIMARY_RESELECT: ::std::os::raw::c_uint = 12;
pub const IFLA_BOND_FAIL_OVER_MAC: ::std::os::raw::c_uint = 13;
pub const IFLA_BOND_XMIT_HASH_POLICY: ::std::os::raw::c_uint = 14;
pub const IFLA_BOND_RESEND_IGMP: ::std::os::raw::c_uint = 15;
pub const IFLA_BOND_NUM_PEER_NOTIF: ::std::os::raw::c_uint = 16;
pub const IFLA_BOND_ALL_SLAVES_ACTIVE: ::std::os::raw::c_uint = 17;
pub const IFLA_BOND_MIN_LINKS: ::std::os::raw::c_uint = 18;
pub const IFLA_BOND_LP_INTERVAL: ::std::os::raw::c_uint = 19;
pub const IFLA_BOND_PACKETS_PER_SLAVE: ::std::os::raw::c_uint = 20;
pub const IFLA_BOND_AD_LACP_RATE: ::std::os::raw::c_uint = 21;
pub const IFLA_BOND_AD_SELECT: ::std::os::raw::c_uint = 22;
pub const IFLA_BOND_AD_INFO: ::std::os::raw::c_uint = 23;
pub const IFLA_BOND_AD_ACTOR_SYS_PRIO: ::std::os::raw::c_uint = 24;
pub const IFLA_BOND_AD_USER_PORT_KEY: ::std::os::raw::c_uint = 25;
pub const IFLA_BOND_AD_ACTOR_SYSTEM: ::std::os::raw::c_uint = 26;
pub const IFLA_BOND_TLB_DYNAMIC_LB: ::std::os::raw::c_uint = 27;
pub const __IFLA_BOND_MAX: ::std::os::raw::c_uint = 28;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
pub const IFLA_BOND_AD_INFO_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_BOND_AD_INFO_AGGREGATOR: ::std::os::raw::c_uint = 1;
pub const IFLA_BOND_AD_INFO_NUM_PORTS: ::std::os::raw::c_uint = 2;
pub const IFLA_BOND_AD_INFO_ACTOR_KEY: ::std::os::raw::c_uint = 3;
pub const IFLA_BOND_AD_INFO_PARTNER_KEY: ::std::os::raw::c_uint = 4;
pub const IFLA_BOND_AD_INFO_PARTNER_MAC: ::std::os::raw::c_uint = 5;
pub const __IFLA_BOND_AD_INFO_MAX: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
pub const IFLA_BOND_SLAVE_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_BOND_SLAVE_STATE: ::std::os::raw::c_uint = 1;
pub const IFLA_BOND_SLAVE_MII_STATUS: ::std::os::raw::c_uint = 2;
pub const IFLA_BOND_SLAVE_LINK_FAILURE_COUNT: ::std::os::raw::c_uint = 3;
pub const IFLA_BOND_SLAVE_PERM_HWADDR: ::std::os::raw::c_uint = 4;
pub const IFLA_BOND_SLAVE_QUEUE_ID: ::std::os::raw::c_uint = 5;
pub const IFLA_BOND_SLAVE_AD_AGGREGATOR_ID: ::std::os::raw::c_uint = 6;
pub const IFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE: ::std::os::raw::c_uint = 7;
pub const IFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE: ::std::os::raw::c_uint = 8;
pub const __IFLA_BOND_SLAVE_MAX: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_28 = ::std::os::raw::c_uint;
pub const IFLA_VF_INFO_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VF_INFO: ::std::os::raw::c_uint = 1;
pub const __IFLA_VF_INFO_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_29 = ::std::os::raw::c_uint;
pub const IFLA_VF_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VF_MAC: ::std::os::raw::c_uint = 1;
pub const IFLA_VF_VLAN: ::std::os::raw::c_uint = 2;
pub const IFLA_VF_TX_RATE: ::std::os::raw::c_uint = 3;
pub const IFLA_VF_SPOOFCHK: ::std::os::raw::c_uint = 4;
pub const IFLA_VF_LINK_STATE: ::std::os::raw::c_uint = 5;
pub const IFLA_VF_RATE: ::std::os::raw::c_uint = 6;
pub const IFLA_VF_RSS_QUERY_EN: ::std::os::raw::c_uint = 7;
pub const IFLA_VF_STATS: ::std::os::raw::c_uint = 8;
pub const IFLA_VF_TRUST: ::std::os::raw::c_uint = 9;
pub const IFLA_VF_IB_NODE_GUID: ::std::os::raw::c_uint = 10;
pub const IFLA_VF_IB_PORT_GUID: ::std::os::raw::c_uint = 11;
pub const IFLA_VF_VLAN_LIST: ::std::os::raw::c_uint = 12;
pub const __IFLA_VF_MAX: ::std::os::raw::c_uint = 13;
pub type _bindgen_ty_30 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_mac {
    pub vf: __u32,
    pub mac: [__u8; 32usize],
}
#[test]
fn bindgen_test_layout_ifla_vf_mac() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_mac>(),
        36usize,
        concat!("Size of: ", stringify!(ifla_vf_mac))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_mac>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_mac))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_mac>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_mac),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_mac>())).mac as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_mac),
            "::",
            stringify!(mac)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_vlan {
    pub vf: __u32,
    pub vlan: __u32,
    pub qos: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_vlan() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_vlan>(),
        12usize,
        concat!("Size of: ", stringify!(ifla_vf_vlan))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_vlan>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_vlan))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan>())).vlan as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan),
            "::",
            stringify!(vlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan>())).qos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan),
            "::",
            stringify!(qos)
        )
    );
}
pub const IFLA_VF_VLAN_INFO_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VF_VLAN_INFO: ::std::os::raw::c_uint = 1;
pub const __IFLA_VF_VLAN_INFO_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_31 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_vlan_info {
    pub vf: __u32,
    pub vlan: __u32,
    pub qos: __u32,
    pub vlan_proto: __be16,
}
#[test]
fn bindgen_test_layout_ifla_vf_vlan_info() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_vlan_info>(),
        16usize,
        concat!("Size of: ", stringify!(ifla_vf_vlan_info))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_vlan_info>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_vlan_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan_info>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan_info),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan_info>())).vlan as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan_info),
            "::",
            stringify!(vlan)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan_info>())).qos as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan_info),
            "::",
            stringify!(qos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_vlan_info>())).vlan_proto as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_vlan_info),
            "::",
            stringify!(vlan_proto)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_tx_rate {
    pub vf: __u32,
    pub rate: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_tx_rate() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_tx_rate>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_tx_rate))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_tx_rate>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_tx_rate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_tx_rate>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_tx_rate),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_tx_rate>())).rate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_tx_rate),
            "::",
            stringify!(rate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_rate {
    pub vf: __u32,
    pub min_tx_rate: __u32,
    pub max_tx_rate: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_rate() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_rate>(),
        12usize,
        concat!("Size of: ", stringify!(ifla_vf_rate))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_rate>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_rate))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rate>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rate),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rate>())).min_tx_rate as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rate),
            "::",
            stringify!(min_tx_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rate>())).max_tx_rate as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rate),
            "::",
            stringify!(max_tx_rate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_spoofchk {
    pub vf: __u32,
    pub setting: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_spoofchk() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_spoofchk>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_spoofchk))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_spoofchk>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_spoofchk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_spoofchk>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_spoofchk),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_spoofchk>())).setting as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_spoofchk),
            "::",
            stringify!(setting)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_guid {
    pub vf: __u32,
    pub guid: __u64,
}
#[test]
fn bindgen_test_layout_ifla_vf_guid() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_guid>(),
        16usize,
        concat!("Size of: ", stringify!(ifla_vf_guid))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_guid>(),
        8usize,
        concat!("Alignment of ", stringify!(ifla_vf_guid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_guid>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_guid),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_guid>())).guid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_guid),
            "::",
            stringify!(guid)
        )
    );
}
pub const IFLA_VF_LINK_STATE_AUTO: ::std::os::raw::c_uint = 0;
pub const IFLA_VF_LINK_STATE_ENABLE: ::std::os::raw::c_uint = 1;
pub const IFLA_VF_LINK_STATE_DISABLE: ::std::os::raw::c_uint = 2;
pub const __IFLA_VF_LINK_STATE_MAX: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_32 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_link_state {
    pub vf: __u32,
    pub link_state: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_link_state() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_link_state>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_link_state))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_link_state>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_link_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_link_state>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_link_state),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_link_state>())).link_state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_link_state),
            "::",
            stringify!(link_state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_rss_query_en {
    pub vf: __u32,
    pub setting: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_rss_query_en() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_rss_query_en>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_rss_query_en))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_rss_query_en>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_rss_query_en))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rss_query_en>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rss_query_en),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_rss_query_en>())).setting as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_rss_query_en),
            "::",
            stringify!(setting)
        )
    );
}
pub const IFLA_VF_STATS_RX_PACKETS: ::std::os::raw::c_uint = 0;
pub const IFLA_VF_STATS_TX_PACKETS: ::std::os::raw::c_uint = 1;
pub const IFLA_VF_STATS_RX_BYTES: ::std::os::raw::c_uint = 2;
pub const IFLA_VF_STATS_TX_BYTES: ::std::os::raw::c_uint = 3;
pub const IFLA_VF_STATS_BROADCAST: ::std::os::raw::c_uint = 4;
pub const IFLA_VF_STATS_MULTICAST: ::std::os::raw::c_uint = 5;
pub const IFLA_VF_STATS_PAD: ::std::os::raw::c_uint = 6;
pub const IFLA_VF_STATS_RX_DROPPED: ::std::os::raw::c_uint = 7;
pub const IFLA_VF_STATS_TX_DROPPED: ::std::os::raw::c_uint = 8;
pub const __IFLA_VF_STATS_MAX: ::std::os::raw::c_uint = 9;
pub type _bindgen_ty_33 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_vf_trust {
    pub vf: __u32,
    pub setting: __u32,
}
#[test]
fn bindgen_test_layout_ifla_vf_trust() {
    assert_eq!(
        ::std::mem::size_of::<ifla_vf_trust>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_vf_trust))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_vf_trust>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_vf_trust))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_trust>())).vf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_trust),
            "::",
            stringify!(vf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_vf_trust>())).setting as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_vf_trust),
            "::",
            stringify!(setting)
        )
    );
}
pub const IFLA_VF_PORT_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_VF_PORT: ::std::os::raw::c_uint = 1;
pub const __IFLA_VF_PORT_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_34 = ::std::os::raw::c_uint;
pub const IFLA_PORT_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_PORT_VF: ::std::os::raw::c_uint = 1;
pub const IFLA_PORT_PROFILE: ::std::os::raw::c_uint = 2;
pub const IFLA_PORT_VSI_TYPE: ::std::os::raw::c_uint = 3;
pub const IFLA_PORT_INSTANCE_UUID: ::std::os::raw::c_uint = 4;
pub const IFLA_PORT_HOST_UUID: ::std::os::raw::c_uint = 5;
pub const IFLA_PORT_REQUEST: ::std::os::raw::c_uint = 6;
pub const IFLA_PORT_RESPONSE: ::std::os::raw::c_uint = 7;
pub const __IFLA_PORT_MAX: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_35 = ::std::os::raw::c_uint;
pub const PORT_REQUEST_PREASSOCIATE: ::std::os::raw::c_uint = 0;
pub const PORT_REQUEST_PREASSOCIATE_RR: ::std::os::raw::c_uint = 1;
pub const PORT_REQUEST_ASSOCIATE: ::std::os::raw::c_uint = 2;
pub const PORT_REQUEST_DISASSOCIATE: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_36 = ::std::os::raw::c_uint;
pub const PORT_VDP_RESPONSE_SUCCESS: ::std::os::raw::c_uint = 0;
pub const PORT_VDP_RESPONSE_INVALID_FORMAT: ::std::os::raw::c_uint = 1;
pub const PORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES: ::std::os::raw::c_uint = 2;
pub const PORT_VDP_RESPONSE_UNUSED_VTID: ::std::os::raw::c_uint = 3;
pub const PORT_VDP_RESPONSE_VTID_VIOLATION: ::std::os::raw::c_uint = 4;
pub const PORT_VDP_RESPONSE_VTID_VERSION_VIOALTION: ::std::os::raw::c_uint = 5;
pub const PORT_VDP_RESPONSE_OUT_OF_SYNC: ::std::os::raw::c_uint = 6;
pub const PORT_PROFILE_RESPONSE_SUCCESS: ::std::os::raw::c_uint = 256;
pub const PORT_PROFILE_RESPONSE_INPROGRESS: ::std::os::raw::c_uint = 257;
pub const PORT_PROFILE_RESPONSE_INVALID: ::std::os::raw::c_uint = 258;
pub const PORT_PROFILE_RESPONSE_BADSTATE: ::std::os::raw::c_uint = 259;
pub const PORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES: ::std::os::raw::c_uint = 260;
pub const PORT_PROFILE_RESPONSE_ERROR: ::std::os::raw::c_uint = 261;
pub type _bindgen_ty_37 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_port_vsi {
    pub vsi_mgr_id: __u8,
    pub vsi_type_id: [__u8; 3usize],
    pub vsi_type_version: __u8,
    pub pad: [__u8; 3usize],
}
#[test]
fn bindgen_test_layout_ifla_port_vsi() {
    assert_eq!(
        ::std::mem::size_of::<ifla_port_vsi>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_port_vsi))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_port_vsi>(),
        1usize,
        concat!("Alignment of ", stringify!(ifla_port_vsi))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_port_vsi>())).vsi_mgr_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_port_vsi),
            "::",
            stringify!(vsi_mgr_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_port_vsi>())).vsi_type_id as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_port_vsi),
            "::",
            stringify!(vsi_type_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_port_vsi>())).vsi_type_version as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_port_vsi),
            "::",
            stringify!(vsi_type_version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_port_vsi>())).pad as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_port_vsi),
            "::",
            stringify!(pad)
        )
    );
}
pub const IFLA_IPOIB_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_IPOIB_PKEY: ::std::os::raw::c_uint = 1;
pub const IFLA_IPOIB_MODE: ::std::os::raw::c_uint = 2;
pub const IFLA_IPOIB_UMCAST: ::std::os::raw::c_uint = 3;
pub const __IFLA_IPOIB_MAX: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_38 = ::std::os::raw::c_uint;
pub const IPOIB_MODE_DATAGRAM: ::std::os::raw::c_uint = 0;
pub const IPOIB_MODE_CONNECTED: ::std::os::raw::c_uint = 1;
pub type _bindgen_ty_39 = ::std::os::raw::c_uint;
pub const IFLA_HSR_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_HSR_SLAVE1: ::std::os::raw::c_uint = 1;
pub const IFLA_HSR_SLAVE2: ::std::os::raw::c_uint = 2;
pub const IFLA_HSR_MULTICAST_SPEC: ::std::os::raw::c_uint = 3;
pub const IFLA_HSR_SUPERVISION_ADDR: ::std::os::raw::c_uint = 4;
pub const IFLA_HSR_SEQ_NR: ::std::os::raw::c_uint = 5;
pub const IFLA_HSR_VERSION: ::std::os::raw::c_uint = 6;
pub const __IFLA_HSR_MAX: ::std::os::raw::c_uint = 7;
pub type _bindgen_ty_40 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct if_stats_msg {
    pub family: __u8,
    pub pad1: __u8,
    pub pad2: __u16,
    pub ifindex: __u32,
    pub filter_mask: __u32,
}
#[test]
fn bindgen_test_layout_if_stats_msg() {
    assert_eq!(
        ::std::mem::size_of::<if_stats_msg>(),
        12usize,
        concat!("Size of: ", stringify!(if_stats_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<if_stats_msg>(),
        4usize,
        concat!("Alignment of ", stringify!(if_stats_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).ifindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<if_stats_msg>())).filter_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(if_stats_msg),
            "::",
            stringify!(filter_mask)
        )
    );
}
pub const IFLA_STATS_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_STATS_LINK_64: ::std::os::raw::c_uint = 1;
pub const IFLA_STATS_LINK_XSTATS: ::std::os::raw::c_uint = 2;
pub const IFLA_STATS_LINK_XSTATS_SLAVE: ::std::os::raw::c_uint = 3;
pub const IFLA_STATS_LINK_OFFLOAD_XSTATS: ::std::os::raw::c_uint = 4;
pub const IFLA_STATS_AF_SPEC: ::std::os::raw::c_uint = 5;
pub const __IFLA_STATS_MAX: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_41 = ::std::os::raw::c_uint;
pub const LINK_XSTATS_TYPE_UNSPEC: ::std::os::raw::c_uint = 0;
pub const LINK_XSTATS_TYPE_BRIDGE: ::std::os::raw::c_uint = 1;
pub const __LINK_XSTATS_TYPE_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_42 = ::std::os::raw::c_uint;
pub const IFLA_OFFLOAD_XSTATS_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_OFFLOAD_XSTATS_CPU_HIT: ::std::os::raw::c_uint = 1;
pub const __IFLA_OFFLOAD_XSTATS_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_43 = ::std::os::raw::c_uint;
pub const XDP_ATTACHED_NONE: ::std::os::raw::c_uint = 0;
pub const XDP_ATTACHED_DRV: ::std::os::raw::c_uint = 1;
pub const XDP_ATTACHED_SKB: ::std::os::raw::c_uint = 2;
pub const XDP_ATTACHED_HW: ::std::os::raw::c_uint = 3;
pub const XDP_ATTACHED_MULTI: ::std::os::raw::c_uint = 4;
pub type _bindgen_ty_44 = ::std::os::raw::c_uint;
pub const IFLA_XDP_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_XDP_FD: ::std::os::raw::c_uint = 1;
pub const IFLA_XDP_ATTACHED: ::std::os::raw::c_uint = 2;
pub const IFLA_XDP_FLAGS: ::std::os::raw::c_uint = 3;
pub const IFLA_XDP_PROG_ID: ::std::os::raw::c_uint = 4;
pub const IFLA_XDP_DRV_PROG_ID: ::std::os::raw::c_uint = 5;
pub const IFLA_XDP_SKB_PROG_ID: ::std::os::raw::c_uint = 6;
pub const IFLA_XDP_HW_PROG_ID: ::std::os::raw::c_uint = 7;
pub const __IFLA_XDP_MAX: ::std::os::raw::c_uint = 8;
pub type _bindgen_ty_45 = ::std::os::raw::c_uint;
pub const IFLA_EVENT_NONE: ::std::os::raw::c_uint = 0;
pub const IFLA_EVENT_REBOOT: ::std::os::raw::c_uint = 1;
pub const IFLA_EVENT_FEATURES: ::std::os::raw::c_uint = 2;
pub const IFLA_EVENT_BONDING_FAILOVER: ::std::os::raw::c_uint = 3;
pub const IFLA_EVENT_NOTIFY_PEERS: ::std::os::raw::c_uint = 4;
pub const IFLA_EVENT_IGMP_RESEND: ::std::os::raw::c_uint = 5;
pub const IFLA_EVENT_BONDING_OPTIONS: ::std::os::raw::c_uint = 6;
pub type _bindgen_ty_46 = ::std::os::raw::c_uint;
pub const IFLA_TUN_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_TUN_OWNER: ::std::os::raw::c_uint = 1;
pub const IFLA_TUN_GROUP: ::std::os::raw::c_uint = 2;
pub const IFLA_TUN_TYPE: ::std::os::raw::c_uint = 3;
pub const IFLA_TUN_PI: ::std::os::raw::c_uint = 4;
pub const IFLA_TUN_VNET_HDR: ::std::os::raw::c_uint = 5;
pub const IFLA_TUN_PERSIST: ::std::os::raw::c_uint = 6;
pub const IFLA_TUN_MULTI_QUEUE: ::std::os::raw::c_uint = 7;
pub const IFLA_TUN_NUM_QUEUES: ::std::os::raw::c_uint = 8;
pub const IFLA_TUN_NUM_DISABLED_QUEUES: ::std::os::raw::c_uint = 9;
pub const __IFLA_TUN_MAX: ::std::os::raw::c_uint = 10;
pub type _bindgen_ty_47 = ::std::os::raw::c_uint;
pub const IFLA_RMNET_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFLA_RMNET_MUX_ID: ::std::os::raw::c_uint = 1;
pub const IFLA_RMNET_FLAGS: ::std::os::raw::c_uint = 2;
pub const __IFLA_RMNET_MAX: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_48 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifla_rmnet_flags {
    pub flags: __u32,
    pub mask: __u32,
}
#[test]
fn bindgen_test_layout_ifla_rmnet_flags() {
    assert_eq!(
        ::std::mem::size_of::<ifla_rmnet_flags>(),
        8usize,
        concat!("Size of: ", stringify!(ifla_rmnet_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<ifla_rmnet_flags>(),
        4usize,
        concat!("Alignment of ", stringify!(ifla_rmnet_flags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_rmnet_flags>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_rmnet_flags),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifla_rmnet_flags>())).mask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifla_rmnet_flags),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifaddrmsg {
    pub ifa_family: __u8,
    pub ifa_prefixlen: __u8,
    pub ifa_flags: __u8,
    pub ifa_scope: __u8,
    pub ifa_index: __u32,
}
#[test]
fn bindgen_test_layout_ifaddrmsg() {
    assert_eq!(
        ::std::mem::size_of::<ifaddrmsg>(),
        8usize,
        concat!("Size of: ", stringify!(ifaddrmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<ifaddrmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(ifaddrmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifaddrmsg>())).ifa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrmsg),
            "::",
            stringify!(ifa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifaddrmsg>())).ifa_prefixlen as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrmsg),
            "::",
            stringify!(ifa_prefixlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifaddrmsg>())).ifa_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrmsg),
            "::",
            stringify!(ifa_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifaddrmsg>())).ifa_scope as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrmsg),
            "::",
            stringify!(ifa_scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifaddrmsg>())).ifa_index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifaddrmsg),
            "::",
            stringify!(ifa_index)
        )
    );
}
pub const IFA_UNSPEC: ::std::os::raw::c_uint = 0;
pub const IFA_ADDRESS: ::std::os::raw::c_uint = 1;
pub const IFA_LOCAL: ::std::os::raw::c_uint = 2;
pub const IFA_LABEL: ::std::os::raw::c_uint = 3;
pub const IFA_BROADCAST: ::std::os::raw::c_uint = 4;
pub const IFA_ANYCAST: ::std::os::raw::c_uint = 5;
pub const IFA_CACHEINFO: ::std::os::raw::c_uint = 6;
pub const IFA_MULTICAST: ::std::os::raw::c_uint = 7;
pub const IFA_FLAGS: ::std::os::raw::c_uint = 8;
pub const IFA_RT_PRIORITY: ::std::os::raw::c_uint = 9;
pub const __IFA_MAX: ::std::os::raw::c_uint = 10;
pub type _bindgen_ty_49 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifa_cacheinfo {
    pub ifa_prefered: __u32,
    pub ifa_valid: __u32,
    pub cstamp: __u32,
    pub tstamp: __u32,
}
#[test]
fn bindgen_test_layout_ifa_cacheinfo() {
    assert_eq!(
        ::std::mem::size_of::<ifa_cacheinfo>(),
        16usize,
        concat!("Size of: ", stringify!(ifa_cacheinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ifa_cacheinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ifa_cacheinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifa_cacheinfo>())).ifa_prefered as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifa_cacheinfo),
            "::",
            stringify!(ifa_prefered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifa_cacheinfo>())).ifa_valid as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifa_cacheinfo),
            "::",
            stringify!(ifa_valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifa_cacheinfo>())).cstamp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifa_cacheinfo),
            "::",
            stringify!(cstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifa_cacheinfo>())).tstamp as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ifa_cacheinfo),
            "::",
            stringify!(tstamp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ndmsg {
    pub ndm_family: __u8,
    pub ndm_pad1: __u8,
    pub ndm_pad2: __u16,
    pub ndm_ifindex: __s32,
    pub ndm_state: __u16,
    pub ndm_flags: __u8,
    pub ndm_type: __u8,
}
#[test]
fn bindgen_test_layout_ndmsg() {
    assert_eq!(
        ::std::mem::size_of::<ndmsg>(),
        12usize,
        concat!("Size of: ", stringify!(ndmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<ndmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(ndmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndmsg>())).ndm_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ndmsg),
            "::",
            stringify!(ndm_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndmsg>())).ndm_pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ndmsg),
            "::",
            stringify!(ndm_pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndmsg>())).ndm_pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ndmsg),
            "::",
            stringify!(ndm_pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndmsg>())).ndm_ifindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ndmsg),
            "::",
            stringify!(ndm_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndmsg>())).ndm_state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ndmsg),
            "::",
            stringify!(ndm_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndmsg>())).ndm_flags as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ndmsg),
            "::",
            stringify!(ndm_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndmsg>())).ndm_type as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(ndmsg),
            "::",
            stringify!(ndm_type)
        )
    );
}
pub const NDA_UNSPEC: ::std::os::raw::c_uint = 0;
pub const NDA_DST: ::std::os::raw::c_uint = 1;
pub const NDA_LLADDR: ::std::os::raw::c_uint = 2;
pub const NDA_CACHEINFO: ::std::os::raw::c_uint = 3;
pub const NDA_PROBES: ::std::os::raw::c_uint = 4;
pub const NDA_VLAN: ::std::os::raw::c_uint = 5;
pub const NDA_PORT: ::std::os::raw::c_uint = 6;
pub const NDA_VNI: ::std::os::raw::c_uint = 7;
pub const NDA_IFINDEX: ::std::os::raw::c_uint = 8;
pub const NDA_MASTER: ::std::os::raw::c_uint = 9;
pub const NDA_LINK_NETNSID: ::std::os::raw::c_uint = 10;
pub const NDA_SRC_VNI: ::std::os::raw::c_uint = 11;
pub const __NDA_MAX: ::std::os::raw::c_uint = 12;
pub type _bindgen_ty_50 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nda_cacheinfo {
    pub ndm_confirmed: __u32,
    pub ndm_used: __u32,
    pub ndm_updated: __u32,
    pub ndm_refcnt: __u32,
}
#[test]
fn bindgen_test_layout_nda_cacheinfo() {
    assert_eq!(
        ::std::mem::size_of::<nda_cacheinfo>(),
        16usize,
        concat!("Size of: ", stringify!(nda_cacheinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<nda_cacheinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(nda_cacheinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nda_cacheinfo>())).ndm_confirmed as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nda_cacheinfo),
            "::",
            stringify!(ndm_confirmed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nda_cacheinfo>())).ndm_used as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nda_cacheinfo),
            "::",
            stringify!(ndm_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nda_cacheinfo>())).ndm_updated as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nda_cacheinfo),
            "::",
            stringify!(ndm_updated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nda_cacheinfo>())).ndm_refcnt as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nda_cacheinfo),
            "::",
            stringify!(ndm_refcnt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ndt_stats {
    pub ndts_allocs: __u64,
    pub ndts_destroys: __u64,
    pub ndts_hash_grows: __u64,
    pub ndts_res_failed: __u64,
    pub ndts_lookups: __u64,
    pub ndts_hits: __u64,
    pub ndts_rcv_probes_mcast: __u64,
    pub ndts_rcv_probes_ucast: __u64,
    pub ndts_periodic_gc_runs: __u64,
    pub ndts_forced_gc_runs: __u64,
    pub ndts_table_fulls: __u64,
}
#[test]
fn bindgen_test_layout_ndt_stats() {
    assert_eq!(
        ::std::mem::size_of::<ndt_stats>(),
        88usize,
        concat!("Size of: ", stringify!(ndt_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<ndt_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(ndt_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_allocs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_allocs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_destroys as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_destroys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_hash_grows as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_hash_grows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_res_failed as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_res_failed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_lookups as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_lookups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_hits as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_hits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_rcv_probes_mcast as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_rcv_probes_mcast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_rcv_probes_ucast as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_rcv_probes_ucast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_periodic_gc_runs as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_periodic_gc_runs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_forced_gc_runs as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_forced_gc_runs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_stats>())).ndts_table_fulls as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_stats),
            "::",
            stringify!(ndts_table_fulls)
        )
    );
}
pub const NDTPA_UNSPEC: ::std::os::raw::c_uint = 0;
pub const NDTPA_IFINDEX: ::std::os::raw::c_uint = 1;
pub const NDTPA_REFCNT: ::std::os::raw::c_uint = 2;
pub const NDTPA_REACHABLE_TIME: ::std::os::raw::c_uint = 3;
pub const NDTPA_BASE_REACHABLE_TIME: ::std::os::raw::c_uint = 4;
pub const NDTPA_RETRANS_TIME: ::std::os::raw::c_uint = 5;
pub const NDTPA_GC_STALETIME: ::std::os::raw::c_uint = 6;
pub const NDTPA_DELAY_PROBE_TIME: ::std::os::raw::c_uint = 7;
pub const NDTPA_QUEUE_LEN: ::std::os::raw::c_uint = 8;
pub const NDTPA_APP_PROBES: ::std::os::raw::c_uint = 9;
pub const NDTPA_UCAST_PROBES: ::std::os::raw::c_uint = 10;
pub const NDTPA_MCAST_PROBES: ::std::os::raw::c_uint = 11;
pub const NDTPA_ANYCAST_DELAY: ::std::os::raw::c_uint = 12;
pub const NDTPA_PROXY_DELAY: ::std::os::raw::c_uint = 13;
pub const NDTPA_PROXY_QLEN: ::std::os::raw::c_uint = 14;
pub const NDTPA_LOCKTIME: ::std::os::raw::c_uint = 15;
pub const NDTPA_QUEUE_LENBYTES: ::std::os::raw::c_uint = 16;
pub const NDTPA_MCAST_REPROBES: ::std::os::raw::c_uint = 17;
pub const NDTPA_PAD: ::std::os::raw::c_uint = 18;
pub const __NDTPA_MAX: ::std::os::raw::c_uint = 19;
pub type _bindgen_ty_51 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ndtmsg {
    pub ndtm_family: __u8,
    pub ndtm_pad1: __u8,
    pub ndtm_pad2: __u16,
}
#[test]
fn bindgen_test_layout_ndtmsg() {
    assert_eq!(
        ::std::mem::size_of::<ndtmsg>(),
        4usize,
        concat!("Size of: ", stringify!(ndtmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<ndtmsg>(),
        2usize,
        concat!("Alignment of ", stringify!(ndtmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndtmsg>())).ndtm_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ndtmsg),
            "::",
            stringify!(ndtm_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndtmsg>())).ndtm_pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ndtmsg),
            "::",
            stringify!(ndtm_pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndtmsg>())).ndtm_pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ndtmsg),
            "::",
            stringify!(ndtm_pad2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ndt_config {
    pub ndtc_key_len: __u16,
    pub ndtc_entry_size: __u16,
    pub ndtc_entries: __u32,
    pub ndtc_last_flush: __u32,
    pub ndtc_last_rand: __u32,
    pub ndtc_hash_rnd: __u32,
    pub ndtc_hash_mask: __u32,
    pub ndtc_hash_chain_gc: __u32,
    pub ndtc_proxy_qlen: __u32,
}
#[test]
fn bindgen_test_layout_ndt_config() {
    assert_eq!(
        ::std::mem::size_of::<ndt_config>(),
        32usize,
        concat!("Size of: ", stringify!(ndt_config))
    );
    assert_eq!(
        ::std::mem::align_of::<ndt_config>(),
        4usize,
        concat!("Alignment of ", stringify!(ndt_config))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_key_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_key_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_entry_size as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_entry_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_entries as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_last_flush as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_last_flush)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_last_rand as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_last_rand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_hash_rnd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_hash_rnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_hash_mask as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_hash_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_hash_chain_gc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_hash_chain_gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ndt_config>())).ndtc_proxy_qlen as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ndt_config),
            "::",
            stringify!(ndtc_proxy_qlen)
        )
    );
}
pub const NDTA_UNSPEC: ::std::os::raw::c_uint = 0;
pub const NDTA_NAME: ::std::os::raw::c_uint = 1;
pub const NDTA_THRESH1: ::std::os::raw::c_uint = 2;
pub const NDTA_THRESH2: ::std::os::raw::c_uint = 3;
pub const NDTA_THRESH3: ::std::os::raw::c_uint = 4;
pub const NDTA_CONFIG: ::std::os::raw::c_uint = 5;
pub const NDTA_PARMS: ::std::os::raw::c_uint = 6;
pub const NDTA_STATS: ::std::os::raw::c_uint = 7;
pub const NDTA_GC_INTERVAL: ::std::os::raw::c_uint = 8;
pub const NDTA_PAD: ::std::os::raw::c_uint = 9;
pub const __NDTA_MAX: ::std::os::raw::c_uint = 10;
pub type _bindgen_ty_52 = ::std::os::raw::c_uint;
pub const RTM_BASE: ::std::os::raw::c_uint = 16;
pub const RTM_NEWLINK: ::std::os::raw::c_uint = 16;
pub const RTM_DELLINK: ::std::os::raw::c_uint = 17;
pub const RTM_GETLINK: ::std::os::raw::c_uint = 18;
pub const RTM_SETLINK: ::std::os::raw::c_uint = 19;
pub const RTM_NEWADDR: ::std::os::raw::c_uint = 20;
pub const RTM_DELADDR: ::std::os::raw::c_uint = 21;
pub const RTM_GETADDR: ::std::os::raw::c_uint = 22;
pub const RTM_NEWROUTE: ::std::os::raw::c_uint = 24;
pub const RTM_DELROUTE: ::std::os::raw::c_uint = 25;
pub const RTM_GETROUTE: ::std::os::raw::c_uint = 26;
pub const RTM_NEWNEIGH: ::std::os::raw::c_uint = 28;
pub const RTM_DELNEIGH: ::std::os::raw::c_uint = 29;
pub const RTM_GETNEIGH: ::std::os::raw::c_uint = 30;
pub const RTM_NEWRULE: ::std::os::raw::c_uint = 32;
pub const RTM_DELRULE: ::std::os::raw::c_uint = 33;
pub const RTM_GETRULE: ::std::os::raw::c_uint = 34;
pub const RTM_NEWQDISC: ::std::os::raw::c_uint = 36;
pub const RTM_DELQDISC: ::std::os::raw::c_uint = 37;
pub const RTM_GETQDISC: ::std::os::raw::c_uint = 38;
pub const RTM_NEWTCLASS: ::std::os::raw::c_uint = 40;
pub const RTM_DELTCLASS: ::std::os::raw::c_uint = 41;
pub const RTM_GETTCLASS: ::std::os::raw::c_uint = 42;
pub const RTM_NEWTFILTER: ::std::os::raw::c_uint = 44;
pub const RTM_DELTFILTER: ::std::os::raw::c_uint = 45;
pub const RTM_GETTFILTER: ::std::os::raw::c_uint = 46;
pub const RTM_NEWACTION: ::std::os::raw::c_uint = 48;
pub const RTM_DELACTION: ::std::os::raw::c_uint = 49;
pub const RTM_GETACTION: ::std::os::raw::c_uint = 50;
pub const RTM_NEWPREFIX: ::std::os::raw::c_uint = 52;
pub const RTM_GETMULTICAST: ::std::os::raw::c_uint = 58;
pub const RTM_GETANYCAST: ::std::os::raw::c_uint = 62;
pub const RTM_NEWNEIGHTBL: ::std::os::raw::c_uint = 64;
pub const RTM_GETNEIGHTBL: ::std::os::raw::c_uint = 66;
pub const RTM_SETNEIGHTBL: ::std::os::raw::c_uint = 67;
pub const RTM_NEWNDUSEROPT: ::std::os::raw::c_uint = 68;
pub const RTM_NEWADDRLABEL: ::std::os::raw::c_uint = 72;
pub const RTM_DELADDRLABEL: ::std::os::raw::c_uint = 73;
pub const RTM_GETADDRLABEL: ::std::os::raw::c_uint = 74;
pub const RTM_GETDCB: ::std::os::raw::c_uint = 78;
pub const RTM_SETDCB: ::std::os::raw::c_uint = 79;
pub const RTM_NEWNETCONF: ::std::os::raw::c_uint = 80;
pub const RTM_DELNETCONF: ::std::os::raw::c_uint = 81;
pub const RTM_GETNETCONF: ::std::os::raw::c_uint = 82;
pub const RTM_NEWMDB: ::std::os::raw::c_uint = 84;
pub const RTM_DELMDB: ::std::os::raw::c_uint = 85;
pub const RTM_GETMDB: ::std::os::raw::c_uint = 86;
pub const RTM_NEWNSID: ::std::os::raw::c_uint = 88;
pub const RTM_DELNSID: ::std::os::raw::c_uint = 89;
pub const RTM_GETNSID: ::std::os::raw::c_uint = 90;
pub const RTM_NEWSTATS: ::std::os::raw::c_uint = 92;
pub const RTM_GETSTATS: ::std::os::raw::c_uint = 94;
pub const RTM_NEWCACHEREPORT: ::std::os::raw::c_uint = 96;
pub const RTM_NEWCHAIN: ::std::os::raw::c_uint = 100;
pub const RTM_DELCHAIN: ::std::os::raw::c_uint = 101;
pub const RTM_GETCHAIN: ::std::os::raw::c_uint = 102;
pub const __RTM_MAX: ::std::os::raw::c_uint = 103;
pub type _bindgen_ty_53 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtattr {
    pub rta_len: ::std::os::raw::c_ushort,
    pub rta_type: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_rtattr() {
    assert_eq!(
        ::std::mem::size_of::<rtattr>(),
        4usize,
        concat!("Size of: ", stringify!(rtattr))
    );
    assert_eq!(
        ::std::mem::align_of::<rtattr>(),
        2usize,
        concat!("Alignment of ", stringify!(rtattr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtattr>())).rta_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtattr),
            "::",
            stringify!(rta_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtattr>())).rta_type as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rtattr),
            "::",
            stringify!(rta_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtmsg {
    pub rtm_family: ::std::os::raw::c_uchar,
    pub rtm_dst_len: ::std::os::raw::c_uchar,
    pub rtm_src_len: ::std::os::raw::c_uchar,
    pub rtm_tos: ::std::os::raw::c_uchar,
    pub rtm_table: ::std::os::raw::c_uchar,
    pub rtm_protocol: ::std::os::raw::c_uchar,
    pub rtm_scope: ::std::os::raw::c_uchar,
    pub rtm_type: ::std::os::raw::c_uchar,
    pub rtm_flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_rtmsg() {
    assert_eq!(
        ::std::mem::size_of::<rtmsg>(),
        12usize,
        concat!("Size of: ", stringify!(rtmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<rtmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(rtmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_dst_len as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_dst_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_src_len as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_src_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_tos as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_tos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_table as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_protocol as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_scope as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_type as *const _ as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtmsg>())).rtm_flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rtmsg),
            "::",
            stringify!(rtm_flags)
        )
    );
}
pub const RTN_UNSPEC: ::std::os::raw::c_uint = 0;
pub const RTN_UNICAST: ::std::os::raw::c_uint = 1;
pub const RTN_LOCAL: ::std::os::raw::c_uint = 2;
pub const RTN_BROADCAST: ::std::os::raw::c_uint = 3;
pub const RTN_ANYCAST: ::std::os::raw::c_uint = 4;
pub const RTN_MULTICAST: ::std::os::raw::c_uint = 5;
pub const RTN_BLACKHOLE: ::std::os::raw::c_uint = 6;
pub const RTN_UNREACHABLE: ::std::os::raw::c_uint = 7;
pub const RTN_PROHIBIT: ::std::os::raw::c_uint = 8;
pub const RTN_THROW: ::std::os::raw::c_uint = 9;
pub const RTN_NAT: ::std::os::raw::c_uint = 10;
pub const RTN_XRESOLVE: ::std::os::raw::c_uint = 11;
pub const __RTN_MAX: ::std::os::raw::c_uint = 12;
pub type _bindgen_ty_54 = ::std::os::raw::c_uint;
pub const rt_scope_t_RT_SCOPE_UNIVERSE: rt_scope_t = 0;
pub const rt_scope_t_RT_SCOPE_SITE: rt_scope_t = 200;
pub const rt_scope_t_RT_SCOPE_LINK: rt_scope_t = 253;
pub const rt_scope_t_RT_SCOPE_HOST: rt_scope_t = 254;
pub const rt_scope_t_RT_SCOPE_NOWHERE: rt_scope_t = 255;
pub type rt_scope_t = ::std::os::raw::c_uint;
pub const rt_class_t_RT_TABLE_UNSPEC: rt_class_t = 0;
pub const rt_class_t_RT_TABLE_COMPAT: rt_class_t = 252;
pub const rt_class_t_RT_TABLE_DEFAULT: rt_class_t = 253;
pub const rt_class_t_RT_TABLE_MAIN: rt_class_t = 254;
pub const rt_class_t_RT_TABLE_LOCAL: rt_class_t = 255;
pub const rt_class_t_RT_TABLE_MAX: rt_class_t = 4294967295;
pub type rt_class_t = ::std::os::raw::c_uint;
pub const rtattr_type_t_RTA_UNSPEC: rtattr_type_t = 0;
pub const rtattr_type_t_RTA_DST: rtattr_type_t = 1;
pub const rtattr_type_t_RTA_SRC: rtattr_type_t = 2;
pub const rtattr_type_t_RTA_IIF: rtattr_type_t = 3;
pub const rtattr_type_t_RTA_OIF: rtattr_type_t = 4;
pub const rtattr_type_t_RTA_GATEWAY: rtattr_type_t = 5;
pub const rtattr_type_t_RTA_PRIORITY: rtattr_type_t = 6;
pub const rtattr_type_t_RTA_PREFSRC: rtattr_type_t = 7;
pub const rtattr_type_t_RTA_METRICS: rtattr_type_t = 8;
pub const rtattr_type_t_RTA_MULTIPATH: rtattr_type_t = 9;
pub const rtattr_type_t_RTA_PROTOINFO: rtattr_type_t = 10;
pub const rtattr_type_t_RTA_FLOW: rtattr_type_t = 11;
pub const rtattr_type_t_RTA_CACHEINFO: rtattr_type_t = 12;
pub const rtattr_type_t_RTA_SESSION: rtattr_type_t = 13;
pub const rtattr_type_t_RTA_MP_ALGO: rtattr_type_t = 14;
pub const rtattr_type_t_RTA_TABLE: rtattr_type_t = 15;
pub const rtattr_type_t_RTA_MARK: rtattr_type_t = 16;
pub const rtattr_type_t_RTA_MFC_STATS: rtattr_type_t = 17;
pub const rtattr_type_t_RTA_VIA: rtattr_type_t = 18;
pub const rtattr_type_t_RTA_NEWDST: rtattr_type_t = 19;
pub const rtattr_type_t_RTA_PREF: rtattr_type_t = 20;
pub const rtattr_type_t_RTA_ENCAP_TYPE: rtattr_type_t = 21;
pub const rtattr_type_t_RTA_ENCAP: rtattr_type_t = 22;
pub const rtattr_type_t_RTA_EXPIRES: rtattr_type_t = 23;
pub const rtattr_type_t_RTA_PAD: rtattr_type_t = 24;
pub const rtattr_type_t_RTA_UID: rtattr_type_t = 25;
pub const rtattr_type_t_RTA_TTL_PROPAGATE: rtattr_type_t = 26;
pub const rtattr_type_t_RTA_IP_PROTO: rtattr_type_t = 27;
pub const rtattr_type_t_RTA_SPORT: rtattr_type_t = 28;
pub const rtattr_type_t_RTA_DPORT: rtattr_type_t = 29;
pub const rtattr_type_t___RTA_MAX: rtattr_type_t = 30;
pub type rtattr_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtnexthop {
    pub rtnh_len: ::std::os::raw::c_ushort,
    pub rtnh_flags: ::std::os::raw::c_uchar,
    pub rtnh_hops: ::std::os::raw::c_uchar,
    pub rtnh_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rtnexthop() {
    assert_eq!(
        ::std::mem::size_of::<rtnexthop>(),
        8usize,
        concat!("Size of: ", stringify!(rtnexthop))
    );
    assert_eq!(
        ::std::mem::align_of::<rtnexthop>(),
        4usize,
        concat!("Alignment of ", stringify!(rtnexthop))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnexthop>())).rtnh_len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnexthop),
            "::",
            stringify!(rtnh_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnexthop>())).rtnh_flags as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnexthop),
            "::",
            stringify!(rtnh_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnexthop>())).rtnh_hops as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnexthop),
            "::",
            stringify!(rtnh_hops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtnexthop>())).rtnh_ifindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rtnexthop),
            "::",
            stringify!(rtnh_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct rtvia {
    pub rtvia_family: __kernel_sa_family_t,
    pub rtvia_addr: __IncompleteArrayField<__u8>,
}
#[test]
fn bindgen_test_layout_rtvia() {
    assert_eq!(
        ::std::mem::size_of::<rtvia>(),
        2usize,
        concat!("Size of: ", stringify!(rtvia))
    );
    assert_eq!(
        ::std::mem::align_of::<rtvia>(),
        2usize,
        concat!("Alignment of ", stringify!(rtvia))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtvia>())).rtvia_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtvia),
            "::",
            stringify!(rtvia_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtvia>())).rtvia_addr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rtvia),
            "::",
            stringify!(rtvia_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rta_cacheinfo {
    pub rta_clntref: __u32,
    pub rta_lastuse: __u32,
    pub rta_expires: __s32,
    pub rta_error: __u32,
    pub rta_used: __u32,
    pub rta_id: __u32,
    pub rta_ts: __u32,
    pub rta_tsage: __u32,
}
#[test]
fn bindgen_test_layout_rta_cacheinfo() {
    assert_eq!(
        ::std::mem::size_of::<rta_cacheinfo>(),
        32usize,
        concat!("Size of: ", stringify!(rta_cacheinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<rta_cacheinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(rta_cacheinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_clntref as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_clntref)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_lastuse as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_lastuse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_expires as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_expires)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_error as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_used as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_id as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_ts as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_ts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_cacheinfo>())).rta_tsage as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_cacheinfo),
            "::",
            stringify!(rta_tsage)
        )
    );
}
pub const RTAX_UNSPEC: ::std::os::raw::c_uint = 0;
pub const RTAX_LOCK: ::std::os::raw::c_uint = 1;
pub const RTAX_MTU: ::std::os::raw::c_uint = 2;
pub const RTAX_WINDOW: ::std::os::raw::c_uint = 3;
pub const RTAX_RTT: ::std::os::raw::c_uint = 4;
pub const RTAX_RTTVAR: ::std::os::raw::c_uint = 5;
pub const RTAX_SSTHRESH: ::std::os::raw::c_uint = 6;
pub const RTAX_CWND: ::std::os::raw::c_uint = 7;
pub const RTAX_ADVMSS: ::std::os::raw::c_uint = 8;
pub const RTAX_REORDERING: ::std::os::raw::c_uint = 9;
pub const RTAX_HOPLIMIT: ::std::os::raw::c_uint = 10;
pub const RTAX_INITCWND: ::std::os::raw::c_uint = 11;
pub const RTAX_FEATURES: ::std::os::raw::c_uint = 12;
pub const RTAX_RTO_MIN: ::std::os::raw::c_uint = 13;
pub const RTAX_INITRWND: ::std::os::raw::c_uint = 14;
pub const RTAX_QUICKACK: ::std::os::raw::c_uint = 15;
pub const RTAX_CC_ALGO: ::std::os::raw::c_uint = 16;
pub const RTAX_FASTOPEN_NO_COOKIE: ::std::os::raw::c_uint = 17;
pub const __RTAX_MAX: ::std::os::raw::c_uint = 18;
pub type _bindgen_ty_55 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rta_session {
    pub proto: __u8,
    pub pad1: __u8,
    pub pad2: __u16,
    pub u: rta_session__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rta_session__bindgen_ty_1 {
    pub ports: rta_session__bindgen_ty_1__bindgen_ty_1,
    pub icmpt: rta_session__bindgen_ty_1__bindgen_ty_2,
    pub spi: __u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rta_session__bindgen_ty_1__bindgen_ty_1 {
    pub sport: __u16,
    pub dport: __u16,
}
#[test]
fn bindgen_test_layout_rta_session__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rta_session__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rta_session__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rta_session__bindgen_ty_1__bindgen_ty_1>())).sport as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(sport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rta_session__bindgen_ty_1__bindgen_ty_1>())).dport as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(dport)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rta_session__bindgen_ty_1__bindgen_ty_2 {
    pub type_: __u8,
    pub code: __u8,
    pub ident: __u16,
}
#[test]
fn bindgen_test_layout_rta_session__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<rta_session__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rta_session__bindgen_ty_1__bindgen_ty_2>(),
        2usize,
        concat!(
            "Alignment of ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rta_session__bindgen_ty_1__bindgen_ty_2>())).type_ as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rta_session__bindgen_ty_1__bindgen_ty_2>())).code as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rta_session__bindgen_ty_1__bindgen_ty_2>())).ident as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(ident)
        )
    );
}
#[test]
fn bindgen_test_layout_rta_session__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rta_session__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(rta_session__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rta_session__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(rta_session__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_session__bindgen_ty_1>())).ports as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1),
            "::",
            stringify!(ports)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_session__bindgen_ty_1>())).icmpt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1),
            "::",
            stringify!(icmpt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_session__bindgen_ty_1>())).spi as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session__bindgen_ty_1),
            "::",
            stringify!(spi)
        )
    );
}
#[test]
fn bindgen_test_layout_rta_session() {
    assert_eq!(
        ::std::mem::size_of::<rta_session>(),
        8usize,
        concat!("Size of: ", stringify!(rta_session))
    );
    assert_eq!(
        ::std::mem::align_of::<rta_session>(),
        4usize,
        concat!("Alignment of ", stringify!(rta_session))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_session>())).proto as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_session>())).pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_session>())).pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_session>())).u as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_session),
            "::",
            stringify!(u)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rta_mfc_stats {
    pub mfcs_packets: __u64,
    pub mfcs_bytes: __u64,
    pub mfcs_wrong_if: __u64,
}
#[test]
fn bindgen_test_layout_rta_mfc_stats() {
    assert_eq!(
        ::std::mem::size_of::<rta_mfc_stats>(),
        24usize,
        concat!("Size of: ", stringify!(rta_mfc_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<rta_mfc_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(rta_mfc_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_mfc_stats>())).mfcs_packets as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_mfc_stats),
            "::",
            stringify!(mfcs_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_mfc_stats>())).mfcs_bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_mfc_stats),
            "::",
            stringify!(mfcs_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rta_mfc_stats>())).mfcs_wrong_if as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rta_mfc_stats),
            "::",
            stringify!(mfcs_wrong_if)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rtgenmsg {
    pub rtgen_family: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_rtgenmsg() {
    assert_eq!(
        ::std::mem::size_of::<rtgenmsg>(),
        1usize,
        concat!("Size of: ", stringify!(rtgenmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<rtgenmsg>(),
        1usize,
        concat!("Alignment of ", stringify!(rtgenmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rtgenmsg>())).rtgen_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rtgenmsg),
            "::",
            stringify!(rtgen_family)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ifinfomsg {
    pub ifi_family: ::std::os::raw::c_uchar,
    pub __ifi_pad: ::std::os::raw::c_uchar,
    pub ifi_type: ::std::os::raw::c_ushort,
    pub ifi_index: ::std::os::raw::c_int,
    pub ifi_flags: ::std::os::raw::c_uint,
    pub ifi_change: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ifinfomsg() {
    assert_eq!(
        ::std::mem::size_of::<ifinfomsg>(),
        16usize,
        concat!("Size of: ", stringify!(ifinfomsg))
    );
    assert_eq!(
        ::std::mem::align_of::<ifinfomsg>(),
        4usize,
        concat!("Alignment of ", stringify!(ifinfomsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifinfomsg>())).ifi_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ifinfomsg),
            "::",
            stringify!(ifi_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifinfomsg>())).__ifi_pad as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ifinfomsg),
            "::",
            stringify!(__ifi_pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifinfomsg>())).ifi_type as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ifinfomsg),
            "::",
            stringify!(ifi_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifinfomsg>())).ifi_index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ifinfomsg),
            "::",
            stringify!(ifi_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifinfomsg>())).ifi_flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ifinfomsg),
            "::",
            stringify!(ifi_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ifinfomsg>())).ifi_change as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ifinfomsg),
            "::",
            stringify!(ifi_change)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prefixmsg {
    pub prefix_family: ::std::os::raw::c_uchar,
    pub prefix_pad1: ::std::os::raw::c_uchar,
    pub prefix_pad2: ::std::os::raw::c_ushort,
    pub prefix_ifindex: ::std::os::raw::c_int,
    pub prefix_type: ::std::os::raw::c_uchar,
    pub prefix_len: ::std::os::raw::c_uchar,
    pub prefix_flags: ::std::os::raw::c_uchar,
    pub prefix_pad3: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_prefixmsg() {
    assert_eq!(
        ::std::mem::size_of::<prefixmsg>(),
        12usize,
        concat!("Size of: ", stringify!(prefixmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<prefixmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(prefixmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_ifindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_len as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_flags as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefixmsg>())).prefix_pad3 as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(prefixmsg),
            "::",
            stringify!(prefix_pad3)
        )
    );
}
pub const PREFIX_UNSPEC: ::std::os::raw::c_uint = 0;
pub const PREFIX_ADDRESS: ::std::os::raw::c_uint = 1;
pub const PREFIX_CACHEINFO: ::std::os::raw::c_uint = 2;
pub const __PREFIX_MAX: ::std::os::raw::c_uint = 3;
pub type _bindgen_ty_56 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct prefix_cacheinfo {
    pub preferred_time: __u32,
    pub valid_time: __u32,
}
#[test]
fn bindgen_test_layout_prefix_cacheinfo() {
    assert_eq!(
        ::std::mem::size_of::<prefix_cacheinfo>(),
        8usize,
        concat!("Size of: ", stringify!(prefix_cacheinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<prefix_cacheinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(prefix_cacheinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefix_cacheinfo>())).preferred_time as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(prefix_cacheinfo),
            "::",
            stringify!(preferred_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<prefix_cacheinfo>())).valid_time as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(prefix_cacheinfo),
            "::",
            stringify!(valid_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcmsg {
    pub tcm_family: ::std::os::raw::c_uchar,
    pub tcm__pad1: ::std::os::raw::c_uchar,
    pub tcm__pad2: ::std::os::raw::c_ushort,
    pub tcm_ifindex: ::std::os::raw::c_int,
    pub tcm_handle: __u32,
    pub tcm_parent: __u32,
    pub tcm_info: __u32,
}
#[test]
fn bindgen_test_layout_tcmsg() {
    assert_eq!(
        ::std::mem::size_of::<tcmsg>(),
        20usize,
        concat!("Size of: ", stringify!(tcmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<tcmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(tcmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcmsg>())).tcm_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcmsg),
            "::",
            stringify!(tcm_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcmsg>())).tcm__pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(tcmsg),
            "::",
            stringify!(tcm__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcmsg>())).tcm__pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcmsg),
            "::",
            stringify!(tcm__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcmsg>())).tcm_ifindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcmsg),
            "::",
            stringify!(tcm_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcmsg>())).tcm_handle as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcmsg),
            "::",
            stringify!(tcm_handle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcmsg>())).tcm_parent as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tcmsg),
            "::",
            stringify!(tcm_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcmsg>())).tcm_info as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcmsg),
            "::",
            stringify!(tcm_info)
        )
    );
}
pub const TCA_UNSPEC: ::std::os::raw::c_uint = 0;
pub const TCA_KIND: ::std::os::raw::c_uint = 1;
pub const TCA_OPTIONS: ::std::os::raw::c_uint = 2;
pub const TCA_STATS: ::std::os::raw::c_uint = 3;
pub const TCA_XSTATS: ::std::os::raw::c_uint = 4;
pub const TCA_RATE: ::std::os::raw::c_uint = 5;
pub const TCA_FCNT: ::std::os::raw::c_uint = 6;
pub const TCA_STATS2: ::std::os::raw::c_uint = 7;
pub const TCA_STAB: ::std::os::raw::c_uint = 8;
pub const TCA_PAD: ::std::os::raw::c_uint = 9;
pub const TCA_DUMP_INVISIBLE: ::std::os::raw::c_uint = 10;
pub const TCA_CHAIN: ::std::os::raw::c_uint = 11;
pub const TCA_HW_OFFLOAD: ::std::os::raw::c_uint = 12;
pub const TCA_INGRESS_BLOCK: ::std::os::raw::c_uint = 13;
pub const TCA_EGRESS_BLOCK: ::std::os::raw::c_uint = 14;
pub const __TCA_MAX: ::std::os::raw::c_uint = 15;
pub type _bindgen_ty_57 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nduseroptmsg {
    pub nduseropt_family: ::std::os::raw::c_uchar,
    pub nduseropt_pad1: ::std::os::raw::c_uchar,
    pub nduseropt_opts_len: ::std::os::raw::c_ushort,
    pub nduseropt_ifindex: ::std::os::raw::c_int,
    pub nduseropt_icmp_type: __u8,
    pub nduseropt_icmp_code: __u8,
    pub nduseropt_pad2: ::std::os::raw::c_ushort,
    pub nduseropt_pad3: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_nduseroptmsg() {
    assert_eq!(
        ::std::mem::size_of::<nduseroptmsg>(),
        16usize,
        concat!("Size of: ", stringify!(nduseroptmsg))
    );
    assert_eq!(
        ::std::mem::align_of::<nduseroptmsg>(),
        4usize,
        concat!("Alignment of ", stringify!(nduseroptmsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_opts_len as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_opts_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_ifindex as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_ifindex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_icmp_type as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_icmp_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_icmp_code as *const _ as usize
        },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_icmp_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_pad2 as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<nduseroptmsg>())).nduseropt_pad3 as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(nduseroptmsg),
            "::",
            stringify!(nduseropt_pad3)
        )
    );
}
pub const NDUSEROPT_UNSPEC: ::std::os::raw::c_uint = 0;
pub const NDUSEROPT_SRCADDR: ::std::os::raw::c_uint = 1;
pub const __NDUSEROPT_MAX: ::std::os::raw::c_uint = 2;
pub type _bindgen_ty_58 = ::std::os::raw::c_uint;
pub const rtnetlink_groups_RTNLGRP_NONE: rtnetlink_groups = 0;
pub const rtnetlink_groups_RTNLGRP_LINK: rtnetlink_groups = 1;
pub const rtnetlink_groups_RTNLGRP_NOTIFY: rtnetlink_groups = 2;
pub const rtnetlink_groups_RTNLGRP_NEIGH: rtnetlink_groups = 3;
pub const rtnetlink_groups_RTNLGRP_TC: rtnetlink_groups = 4;
pub const rtnetlink_groups_RTNLGRP_IPV4_IFADDR: rtnetlink_groups = 5;
pub const rtnetlink_groups_RTNLGRP_IPV4_MROUTE: rtnetlink_groups = 6;
pub const rtnetlink_groups_RTNLGRP_IPV4_ROUTE: rtnetlink_groups = 7;
pub const rtnetlink_groups_RTNLGRP_IPV4_RULE: rtnetlink_groups = 8;
pub const rtnetlink_groups_RTNLGRP_IPV6_IFADDR: rtnetlink_groups = 9;
pub const rtnetlink_groups_RTNLGRP_IPV6_MROUTE: rtnetlink_groups = 10;
pub const rtnetlink_groups_RTNLGRP_IPV6_ROUTE: rtnetlink_groups = 11;
pub const rtnetlink_groups_RTNLGRP_IPV6_IFINFO: rtnetlink_groups = 12;
pub const rtnetlink_groups_RTNLGRP_DECnet_IFADDR: rtnetlink_groups = 13;
pub const rtnetlink_groups_RTNLGRP_NOP2: rtnetlink_groups = 14;
pub const rtnetlink_groups_RTNLGRP_DECnet_ROUTE: rtnetlink_groups = 15;
pub const rtnetlink_groups_RTNLGRP_DECnet_RULE: rtnetlink_groups = 16;
pub const rtnetlink_groups_RTNLGRP_NOP4: rtnetlink_groups = 17;
pub const rtnetlink_groups_RTNLGRP_IPV6_PREFIX: rtnetlink_groups = 18;
pub const rtnetlink_groups_RTNLGRP_IPV6_RULE: rtnetlink_groups = 19;
pub const rtnetlink_groups_RTNLGRP_ND_USEROPT: rtnetlink_groups = 20;
pub const rtnetlink_groups_RTNLGRP_PHONET_IFADDR: rtnetlink_groups = 21;
pub const rtnetlink_groups_RTNLGRP_PHONET_ROUTE: rtnetlink_groups = 22;
pub const rtnetlink_groups_RTNLGRP_DCB: rtnetlink_groups = 23;
pub const rtnetlink_groups_RTNLGRP_IPV4_NETCONF: rtnetlink_groups = 24;
pub const rtnetlink_groups_RTNLGRP_IPV6_NETCONF: rtnetlink_groups = 25;
pub const rtnetlink_groups_RTNLGRP_MDB: rtnetlink_groups = 26;
pub const rtnetlink_groups_RTNLGRP_MPLS_ROUTE: rtnetlink_groups = 27;
pub const rtnetlink_groups_RTNLGRP_NSID: rtnetlink_groups = 28;
pub const rtnetlink_groups_RTNLGRP_MPLS_NETCONF: rtnetlink_groups = 29;
pub const rtnetlink_groups_RTNLGRP_IPV4_MROUTE_R: rtnetlink_groups = 30;
pub const rtnetlink_groups_RTNLGRP_IPV6_MROUTE_R: rtnetlink_groups = 31;
pub const rtnetlink_groups___RTNLGRP_MAX: rtnetlink_groups = 32;
pub type rtnetlink_groups = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcamsg {
    pub tca_family: ::std::os::raw::c_uchar,
    pub tca__pad1: ::std::os::raw::c_uchar,
    pub tca__pad2: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_tcamsg() {
    assert_eq!(
        ::std::mem::size_of::<tcamsg>(),
        4usize,
        concat!("Size of: ", stringify!(tcamsg))
    );
    assert_eq!(
        ::std::mem::align_of::<tcamsg>(),
        2usize,
        concat!("Alignment of ", stringify!(tcamsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcamsg>())).tca_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcamsg),
            "::",
            stringify!(tca_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcamsg>())).tca__pad1 as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(tcamsg),
            "::",
            stringify!(tca__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcamsg>())).tca__pad2 as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(tcamsg),
            "::",
            stringify!(tca__pad2)
        )
    );
}
pub const TCA_ROOT_UNSPEC: ::std::os::raw::c_uint = 0;
pub const TCA_ROOT_TAB: ::std::os::raw::c_uint = 1;
pub const TCA_ROOT_FLAGS: ::std::os::raw::c_uint = 2;
pub const TCA_ROOT_COUNT: ::std::os::raw::c_uint = 3;
pub const TCA_ROOT_TIME_DELTA: ::std::os::raw::c_uint = 4;
pub const __TCA_ROOT_MAX: ::std::os::raw::c_uint = 5;
pub type _bindgen_ty_59 = ::std::os::raw::c_uint;
